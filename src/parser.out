Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    NEWLINE
    MANYLINECOMMENT
    ONELINECOMMENT
    IGNORE
    WHITECHARACTERS

Grammar

Rule 0     S' -> program
Rule 1     program -> start_of_program global_declarations
Rule 2     start_of_program -> <empty>
Rule 3     program -> error
Rule 4     declarations -> empty
Rule 5     declarations -> declaration declarations
Rule 6     declaration -> variable_declaration
Rule 7     declaration -> function_declaration
Rule 8     declaration -> function_definition
Rule 9     global_declarations -> empty
Rule 10    global_declarations -> global_declaration global_declarations
Rule 11    global_declaration -> INCLUDE
Rule 12    global_declaration -> variable_declaration
Rule 13    global_declaration -> function_declaration
Rule 14    global_declaration -> function_definition
Rule 15    variable_declaration -> type many_declarators SEMI
Rule 16    many_declarators -> declarator
Rule 17    many_declarators -> declarator COMMA many_declarators
Rule 18    type -> basic_type maybe_pointer
Rule 19    maybe_pointer -> empty
Rule 20    maybe_pointer -> TIMES maybe_pointer
Rule 21    basic_type -> INTTYPE
Rule 22    basic_type -> CHARTYPE
Rule 23    basic_type -> BOOLTYPE
Rule 24    basic_type -> DOUBLETYPE
Rule 25    identifier -> ID
Rule 26    decl_identifier -> ID
Rule 27    declarator -> decl_identifier
Rule 28    declarator -> decl_identifier LBRACKET constant_expression RBRACKET
Rule 29    function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI
Rule 30    function_with_result_type -> type ID
Rule 31    function_with_result_type -> VOID ID
Rule 32    maybe_parameter_list -> empty
Rule 33    maybe_parameter_list -> parameter_list
Rule 34    parameter_list -> parameter
Rule 35    parameter_list -> parameter COMMA parameter_list
Rule 36    parameter -> type decl_identifier
Rule 37    parameter -> BYREF type decl_identifier
Rule 38    function_definition -> function_with_result_and_parameters declarations statements RBRACE
Rule 39    function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE
Rule 40    new_scope -> <empty>
Rule 41    statements -> empty
Rule 42    statements -> statement statements
Rule 43    statement -> SEMI
Rule 44    statement -> expression SEMI
Rule 45    statement -> LBRACE new_scope statements RBRACE
Rule 46    statement -> IF LPAREN expression RPAREN statement maybe_else
Rule 47    statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
Rule 48    statement -> CONTINUE maybe_id SEMI
Rule 49    statement -> BREAK maybe_id SEMI
Rule 50    statement -> RETURN maybe_expression SEMI
Rule 51    for_loop -> FOR
Rule 52    for_loop -> ID COLON FOR
Rule 53    maybe_id -> empty
Rule 54    maybe_id -> identifier
Rule 55    maybe_expression -> empty
Rule 56    maybe_expression -> expression
Rule 57    maybe_else -> empty
Rule 58    maybe_else -> ELSE statement
Rule 59    expression -> identifier
Rule 60    expression -> parenthesial_expression
Rule 61    expression -> constant_value
Rule 62    expression -> function_call
Rule 63    expression -> ufo
Rule 64    expression -> unary_operation
Rule 65    expression -> binary_operation
Rule 66    expression -> left_assignment
Rule 67    expression -> right_assignment
Rule 68    expression -> whole_assignment
Rule 69    expression -> type_casting
Rule 70    expression -> ternary_operation
Rule 71    expression -> new
Rule 72    expression -> delete
Rule 73    new -> NEW type
Rule 74    new -> NEW type LBRACKET expression RBRACKET
Rule 75    soft_new -> NEW basic_type
Rule 76    soft_new -> soft_new TIMES
Rule 77    strict_new -> soft_new LBRACKET expression RBRACKET
Rule 78    maybe_multi_hack -> empty
Rule 79    maybe_multi_hack -> TIMES maybe_expression
Rule 80    maybe_multi_hack -> LBRACKET expression RBRACKET
Rule 81    maybe_multi_hack -> TIMES LBRACKET expression RBRACKET
Rule 82    parenthesial_expression -> LPAREN expression RPAREN
Rule 83    ufo -> expression LBRACKET expression RBRACKET
Rule 84    function_call -> ID LPAREN empty RPAREN
Rule 85    function_call -> function_with_acts expression RPAREN
Rule 86    function_with_acts -> ID LPAREN
Rule 87    function_with_acts -> function_with_acts expression COMMA
Rule 88    old_function_call -> identifier LPAREN empty RPAREN
Rule 89    old_function_call -> identifier LPAREN expression_list RPAREN
Rule 90    expression_list -> expression
Rule 91    expression_list -> expression COMMA expression_list
Rule 92    unary_operation -> ADDRESS expression
Rule 93    unary_operation -> TIMES expression
Rule 94    unary_operation -> PLUS expression
Rule 95    unary_operation -> MINUS expression
Rule 96    unary_operation -> NOT expression
Rule 97    binary_operation -> expression TIMES expression
Rule 98    binary_operation -> expression DIVIDE expression
Rule 99    binary_operation -> expression PLUS expression
Rule 100   binary_operation -> expression MINUS expression
Rule 101   binary_operation -> expression GT expression
Rule 102   binary_operation -> expression LT expression
Rule 103   binary_operation -> expression LE expression
Rule 104   binary_operation -> expression GE expression
Rule 105   binary_operation -> expression EQ expression
Rule 106   binary_operation -> expression NE expression
Rule 107   binary_operation -> expression OR expression
Rule 108   binary_operation -> expression AND expression
Rule 109   binary_operation -> expression COMMA expression
Rule 110   binary_operation -> expression MODULO expression
Rule 111   left_assignment -> INCREMENT expression
Rule 112   left_assignment -> DECREMENT expression
Rule 113   right_assignment -> expression INCREMENT
Rule 114   right_assignment -> expression DECREMENT
Rule 115   whole_assignment -> expression EQUALS expression
Rule 116   whole_assignment -> expression TIMESEQUAL expression
Rule 117   whole_assignment -> expression DIVEQUAL expression
Rule 118   whole_assignment -> expression MODEQUAL expression
Rule 119   whole_assignment -> expression PLUSEQUAL expression
Rule 120   whole_assignment -> expression MINUSEQUAL expression
Rule 121   type_casting -> LPAREN type RPAREN expression
Rule 122   ternary_operation -> expression TERNARY expression COLON expression
Rule 123   delete -> DELETE expression
Rule 124   constant_value -> TRUE
Rule 125   constant_value -> FALSE
Rule 126   constant_value -> NULL
Rule 127   constant_value -> constant_value_int
Rule 128   constant_value -> constant_value_char
Rule 129   constant_value -> constant_value_double
Rule 130   constant_value -> constant_value_string
Rule 131   constant_value_int -> INTEGER
Rule 132   constant_value_double -> DOUBLE
Rule 133   constant_value_char -> CHAR
Rule 134   constant_value_string -> STRING
Rule 135   constant_expression -> expression
Rule 136   empty -> <empty>

Terminals, with rules where they appear

ADDRESS              : 92
AND                  : 108
BOOLTYPE             : 23
BREAK                : 49
BYREF                : 37
CHAR                 : 133
CHARTYPE             : 22
COLON                : 52 122
COMMA                : 17 35 87 91 109
CONTINUE             : 48
DECREMENT            : 112 114
DELETE               : 123
DIVEQUAL             : 117
DIVIDE               : 98
DOUBLE               : 132
DOUBLETYPE           : 24
ELSE                 : 58
EQ                   : 105
EQUALS               : 115
FALSE                : 125
FOR                  : 51 52
GE                   : 104
GT                   : 101
ID                   : 25 26 30 31 52 84 86
IF                   : 46
IGNORE               : 
INCLUDE              : 11
INCREMENT            : 111 113
INTEGER              : 131
INTTYPE              : 21
LBRACE               : 39 45
LBRACKET             : 28 74 77 80 81 83
LE                   : 103
LPAREN               : 29 39 46 47 82 84 86 88 89 121
LT                   : 102
MANYLINECOMMENT      : 
MINUS                : 95 100
MINUSEQUAL           : 120
MODEQUAL             : 118
MODULO               : 110
NE                   : 106
NEW                  : 73 74 75
NEWLINE              : 
NOT                  : 96
NULL                 : 126
ONELINECOMMENT       : 
OR                   : 107
PLUS                 : 94 99
PLUSEQUAL            : 119
RBRACE               : 38 45
RBRACKET             : 28 74 77 80 81 83
RETURN               : 50
RPAREN               : 29 39 46 47 82 84 85 88 89 121
SEMI                 : 15 29 43 44 47 47 48 49 50
STRING               : 134
TERNARY              : 122
TIMES                : 20 76 79 81 93 97
TIMESEQUAL           : 116
TRUE                 : 124
VOID                 : 31
WHITECHARACTERS      : 
error                : 3

Nonterminals, with rules where they appear

basic_type           : 18 75
binary_operation     : 65
constant_expression  : 28
constant_value       : 61
constant_value_char  : 128
constant_value_double : 129
constant_value_int   : 127
constant_value_string : 130
decl_identifier      : 27 28 36 37
declaration          : 5
declarations         : 5 38
declarator           : 16 17
delete               : 72
empty                : 4 9 19 32 41 53 55 57 78 84 88
expression           : 44 46 56 74 77 80 81 82 83 83 85 87 90 91 92 93 94 95 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 111 112 113 114 115 115 116 116 117 117 118 118 119 119 120 120 121 122 122 122 123 135
expression_list      : 89 91
for_loop             : 47
function_call        : 62
function_declaration : 7 13
function_definition  : 8 14
function_with_acts   : 85 87
function_with_result_and_parameters : 38
function_with_result_type : 29 39
global_declaration   : 10
global_declarations  : 1 10
identifier           : 54 59 88 89
left_assignment      : 66
many_declarators     : 15 17
maybe_else           : 46
maybe_expression     : 47 47 47 50 79
maybe_id             : 48 49
maybe_multi_hack     : 
maybe_parameter_list : 29 39
maybe_pointer        : 18 20
new                  : 71
new_scope            : 45
old_function_call    : 
parameter            : 34 35
parameter_list       : 33 35
parenthesial_expression : 60
program              : 0
right_assignment     : 67
soft_new             : 76 77
start_of_program     : 1
statement            : 42 46 47 58
statements           : 38 42 45
strict_new           : 
ternary_operation    : 70
type                 : 15 30 36 37 73 74 121
type_casting         : 69
ufo                  : 63
unary_operation      : 64
variable_declaration : 6 12
whole_assignment     : 68

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . start_of_program global_declarations
    (3) program -> . error
    (2) start_of_program -> .

    error           shift and go to state 3
    INCLUDE         reduce using rule 2 (start_of_program -> .)
    VOID            reduce using rule 2 (start_of_program -> .)
    INTTYPE         reduce using rule 2 (start_of_program -> .)
    CHARTYPE        reduce using rule 2 (start_of_program -> .)
    BOOLTYPE        reduce using rule 2 (start_of_program -> .)
    DOUBLETYPE      reduce using rule 2 (start_of_program -> .)
    $end            reduce using rule 2 (start_of_program -> .)

    program                        shift and go to state 1
    start_of_program               shift and go to state 2

state 1

    (0) S' -> program .



state 2

    (1) program -> start_of_program . global_declarations
    (9) global_declarations -> . empty
    (10) global_declarations -> . global_declaration global_declarations
    (136) empty -> .
    (11) global_declaration -> . INCLUDE
    (12) global_declaration -> . variable_declaration
    (13) global_declaration -> . function_declaration
    (14) global_declaration -> . function_definition
    (15) variable_declaration -> . type many_declarators SEMI
    (29) function_declaration -> . function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI
    (38) function_definition -> . function_with_result_and_parameters declarations statements RBRACE
    (18) type -> . basic_type maybe_pointer
    (30) function_with_result_type -> . type ID
    (31) function_with_result_type -> . VOID ID
    (39) function_with_result_and_parameters -> . function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    $end            reduce using rule 136 (empty -> .)
    INCLUDE         shift and go to state 13
    VOID            shift and go to state 6
    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    function_with_result_and_parameters shift and go to state 4
    function_definition            shift and go to state 14
    function_declaration           shift and go to state 16
    global_declarations            shift and go to state 9
    basic_type                     shift and go to state 5
    global_declaration             shift and go to state 12
    type                           shift and go to state 17
    variable_declaration           shift and go to state 8
    empty                          shift and go to state 10
    function_with_result_type      shift and go to state 19

state 3

    (3) program -> error .

    $end            reduce using rule 3 (program -> error .)


state 4

    (38) function_definition -> function_with_result_and_parameters . declarations statements RBRACE
    (4) declarations -> . empty
    (5) declarations -> . declaration declarations
    (136) empty -> .
    (6) declaration -> . variable_declaration
    (7) declaration -> . function_declaration
    (8) declaration -> . function_definition
    (15) variable_declaration -> . type many_declarators SEMI
    (29) function_declaration -> . function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI
    (38) function_definition -> . function_with_result_and_parameters declarations statements RBRACE
    (18) type -> . basic_type maybe_pointer
    (30) function_with_result_type -> . type ID
    (31) function_with_result_type -> . VOID ID
    (39) function_with_result_and_parameters -> . function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    SEMI            reduce using rule 136 (empty -> .)
    LBRACE          reduce using rule 136 (empty -> .)
    IF              reduce using rule 136 (empty -> .)
    CONTINUE        reduce using rule 136 (empty -> .)
    BREAK           reduce using rule 136 (empty -> .)
    RETURN          reduce using rule 136 (empty -> .)
    FOR             reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    LPAREN          reduce using rule 136 (empty -> .)
    TRUE            reduce using rule 136 (empty -> .)
    FALSE           reduce using rule 136 (empty -> .)
    NULL            reduce using rule 136 (empty -> .)
    ADDRESS         reduce using rule 136 (empty -> .)
    TIMES           reduce using rule 136 (empty -> .)
    PLUS            reduce using rule 136 (empty -> .)
    MINUS           reduce using rule 136 (empty -> .)
    NOT             reduce using rule 136 (empty -> .)
    INCREMENT       reduce using rule 136 (empty -> .)
    DECREMENT       reduce using rule 136 (empty -> .)
    NEW             reduce using rule 136 (empty -> .)
    DELETE          reduce using rule 136 (empty -> .)
    INTEGER         reduce using rule 136 (empty -> .)
    CHAR            reduce using rule 136 (empty -> .)
    DOUBLE          reduce using rule 136 (empty -> .)
    STRING          reduce using rule 136 (empty -> .)
    RBRACE          reduce using rule 136 (empty -> .)
    VOID            shift and go to state 6
    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    function_with_result_and_parameters shift and go to state 4
    function_definition            shift and go to state 24
    function_declaration           shift and go to state 25
    basic_type                     shift and go to state 5
    declarations                   shift and go to state 20
    function_with_result_type      shift and go to state 19
    declaration                    shift and go to state 23
    type                           shift and go to state 17
    variable_declaration           shift and go to state 21
    empty                          shift and go to state 22

state 5

    (18) type -> basic_type . maybe_pointer
    (19) maybe_pointer -> . empty
    (20) maybe_pointer -> . TIMES maybe_pointer
    (136) empty -> .

    TIMES           shift and go to state 26
    ID              reduce using rule 136 (empty -> .)
    LBRACKET        reduce using rule 136 (empty -> .)
    SEMI            reduce using rule 136 (empty -> .)
    DIVIDE          reduce using rule 136 (empty -> .)
    PLUS            reduce using rule 136 (empty -> .)
    MINUS           reduce using rule 136 (empty -> .)
    GT              reduce using rule 136 (empty -> .)
    LT              reduce using rule 136 (empty -> .)
    LE              reduce using rule 136 (empty -> .)
    GE              reduce using rule 136 (empty -> .)
    EQ              reduce using rule 136 (empty -> .)
    NE              reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    AND             reduce using rule 136 (empty -> .)
    COMMA           reduce using rule 136 (empty -> .)
    MODULO          reduce using rule 136 (empty -> .)
    INCREMENT       reduce using rule 136 (empty -> .)
    DECREMENT       reduce using rule 136 (empty -> .)
    EQUALS          reduce using rule 136 (empty -> .)
    TIMESEQUAL      reduce using rule 136 (empty -> .)
    DIVEQUAL        reduce using rule 136 (empty -> .)
    MODEQUAL        reduce using rule 136 (empty -> .)
    PLUSEQUAL       reduce using rule 136 (empty -> .)
    MINUSEQUAL      reduce using rule 136 (empty -> .)
    TERNARY         reduce using rule 136 (empty -> .)
    RPAREN          reduce using rule 136 (empty -> .)
    RBRACKET        reduce using rule 136 (empty -> .)
    COLON           reduce using rule 136 (empty -> .)

  ! TIMES           [ reduce using rule 136 (empty -> .) ]

    empty                          shift and go to state 27
    maybe_pointer                  shift and go to state 28

state 6

    (31) function_with_result_type -> VOID . ID

    ID              shift and go to state 29


state 7

    (22) basic_type -> CHARTYPE .

    TIMES           reduce using rule 22 (basic_type -> CHARTYPE .)
    LBRACKET        reduce using rule 22 (basic_type -> CHARTYPE .)
    SEMI            reduce using rule 22 (basic_type -> CHARTYPE .)
    DIVIDE          reduce using rule 22 (basic_type -> CHARTYPE .)
    PLUS            reduce using rule 22 (basic_type -> CHARTYPE .)
    MINUS           reduce using rule 22 (basic_type -> CHARTYPE .)
    GT              reduce using rule 22 (basic_type -> CHARTYPE .)
    LT              reduce using rule 22 (basic_type -> CHARTYPE .)
    LE              reduce using rule 22 (basic_type -> CHARTYPE .)
    GE              reduce using rule 22 (basic_type -> CHARTYPE .)
    EQ              reduce using rule 22 (basic_type -> CHARTYPE .)
    NE              reduce using rule 22 (basic_type -> CHARTYPE .)
    OR              reduce using rule 22 (basic_type -> CHARTYPE .)
    AND             reduce using rule 22 (basic_type -> CHARTYPE .)
    COMMA           reduce using rule 22 (basic_type -> CHARTYPE .)
    MODULO          reduce using rule 22 (basic_type -> CHARTYPE .)
    INCREMENT       reduce using rule 22 (basic_type -> CHARTYPE .)
    DECREMENT       reduce using rule 22 (basic_type -> CHARTYPE .)
    EQUALS          reduce using rule 22 (basic_type -> CHARTYPE .)
    TIMESEQUAL      reduce using rule 22 (basic_type -> CHARTYPE .)
    DIVEQUAL        reduce using rule 22 (basic_type -> CHARTYPE .)
    MODEQUAL        reduce using rule 22 (basic_type -> CHARTYPE .)
    PLUSEQUAL       reduce using rule 22 (basic_type -> CHARTYPE .)
    MINUSEQUAL      reduce using rule 22 (basic_type -> CHARTYPE .)
    TERNARY         reduce using rule 22 (basic_type -> CHARTYPE .)
    RPAREN          reduce using rule 22 (basic_type -> CHARTYPE .)
    RBRACKET        reduce using rule 22 (basic_type -> CHARTYPE .)
    COLON           reduce using rule 22 (basic_type -> CHARTYPE .)
    ID              reduce using rule 22 (basic_type -> CHARTYPE .)


state 8

    (12) global_declaration -> variable_declaration .

    INCLUDE         reduce using rule 12 (global_declaration -> variable_declaration .)
    VOID            reduce using rule 12 (global_declaration -> variable_declaration .)
    INTTYPE         reduce using rule 12 (global_declaration -> variable_declaration .)
    CHARTYPE        reduce using rule 12 (global_declaration -> variable_declaration .)
    BOOLTYPE        reduce using rule 12 (global_declaration -> variable_declaration .)
    DOUBLETYPE      reduce using rule 12 (global_declaration -> variable_declaration .)
    $end            reduce using rule 12 (global_declaration -> variable_declaration .)


state 9

    (1) program -> start_of_program global_declarations .

    $end            reduce using rule 1 (program -> start_of_program global_declarations .)


state 10

    (9) global_declarations -> empty .

    $end            reduce using rule 9 (global_declarations -> empty .)


state 11

    (23) basic_type -> BOOLTYPE .

    TIMES           reduce using rule 23 (basic_type -> BOOLTYPE .)
    LBRACKET        reduce using rule 23 (basic_type -> BOOLTYPE .)
    SEMI            reduce using rule 23 (basic_type -> BOOLTYPE .)
    DIVIDE          reduce using rule 23 (basic_type -> BOOLTYPE .)
    PLUS            reduce using rule 23 (basic_type -> BOOLTYPE .)
    MINUS           reduce using rule 23 (basic_type -> BOOLTYPE .)
    GT              reduce using rule 23 (basic_type -> BOOLTYPE .)
    LT              reduce using rule 23 (basic_type -> BOOLTYPE .)
    LE              reduce using rule 23 (basic_type -> BOOLTYPE .)
    GE              reduce using rule 23 (basic_type -> BOOLTYPE .)
    EQ              reduce using rule 23 (basic_type -> BOOLTYPE .)
    NE              reduce using rule 23 (basic_type -> BOOLTYPE .)
    OR              reduce using rule 23 (basic_type -> BOOLTYPE .)
    AND             reduce using rule 23 (basic_type -> BOOLTYPE .)
    COMMA           reduce using rule 23 (basic_type -> BOOLTYPE .)
    MODULO          reduce using rule 23 (basic_type -> BOOLTYPE .)
    INCREMENT       reduce using rule 23 (basic_type -> BOOLTYPE .)
    DECREMENT       reduce using rule 23 (basic_type -> BOOLTYPE .)
    EQUALS          reduce using rule 23 (basic_type -> BOOLTYPE .)
    TIMESEQUAL      reduce using rule 23 (basic_type -> BOOLTYPE .)
    DIVEQUAL        reduce using rule 23 (basic_type -> BOOLTYPE .)
    MODEQUAL        reduce using rule 23 (basic_type -> BOOLTYPE .)
    PLUSEQUAL       reduce using rule 23 (basic_type -> BOOLTYPE .)
    MINUSEQUAL      reduce using rule 23 (basic_type -> BOOLTYPE .)
    TERNARY         reduce using rule 23 (basic_type -> BOOLTYPE .)
    RPAREN          reduce using rule 23 (basic_type -> BOOLTYPE .)
    RBRACKET        reduce using rule 23 (basic_type -> BOOLTYPE .)
    COLON           reduce using rule 23 (basic_type -> BOOLTYPE .)
    ID              reduce using rule 23 (basic_type -> BOOLTYPE .)


state 12

    (10) global_declarations -> global_declaration . global_declarations
    (9) global_declarations -> . empty
    (10) global_declarations -> . global_declaration global_declarations
    (136) empty -> .
    (11) global_declaration -> . INCLUDE
    (12) global_declaration -> . variable_declaration
    (13) global_declaration -> . function_declaration
    (14) global_declaration -> . function_definition
    (15) variable_declaration -> . type many_declarators SEMI
    (29) function_declaration -> . function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI
    (38) function_definition -> . function_with_result_and_parameters declarations statements RBRACE
    (18) type -> . basic_type maybe_pointer
    (30) function_with_result_type -> . type ID
    (31) function_with_result_type -> . VOID ID
    (39) function_with_result_and_parameters -> . function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    $end            reduce using rule 136 (empty -> .)
    INCLUDE         shift and go to state 13
    VOID            shift and go to state 6
    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    function_with_result_and_parameters shift and go to state 4
    function_definition            shift and go to state 14
    function_declaration           shift and go to state 16
    global_declarations            shift and go to state 30
    basic_type                     shift and go to state 5
    function_with_result_type      shift and go to state 19
    global_declaration             shift and go to state 12
    type                           shift and go to state 17
    variable_declaration           shift and go to state 8
    empty                          shift and go to state 10

state 13

    (11) global_declaration -> INCLUDE .

    INCLUDE         reduce using rule 11 (global_declaration -> INCLUDE .)
    VOID            reduce using rule 11 (global_declaration -> INCLUDE .)
    INTTYPE         reduce using rule 11 (global_declaration -> INCLUDE .)
    CHARTYPE        reduce using rule 11 (global_declaration -> INCLUDE .)
    BOOLTYPE        reduce using rule 11 (global_declaration -> INCLUDE .)
    DOUBLETYPE      reduce using rule 11 (global_declaration -> INCLUDE .)
    $end            reduce using rule 11 (global_declaration -> INCLUDE .)


state 14

    (14) global_declaration -> function_definition .

    INCLUDE         reduce using rule 14 (global_declaration -> function_definition .)
    VOID            reduce using rule 14 (global_declaration -> function_definition .)
    INTTYPE         reduce using rule 14 (global_declaration -> function_definition .)
    CHARTYPE        reduce using rule 14 (global_declaration -> function_definition .)
    BOOLTYPE        reduce using rule 14 (global_declaration -> function_definition .)
    DOUBLETYPE      reduce using rule 14 (global_declaration -> function_definition .)
    $end            reduce using rule 14 (global_declaration -> function_definition .)


state 15

    (21) basic_type -> INTTYPE .

    TIMES           reduce using rule 21 (basic_type -> INTTYPE .)
    LBRACKET        reduce using rule 21 (basic_type -> INTTYPE .)
    SEMI            reduce using rule 21 (basic_type -> INTTYPE .)
    DIVIDE          reduce using rule 21 (basic_type -> INTTYPE .)
    PLUS            reduce using rule 21 (basic_type -> INTTYPE .)
    MINUS           reduce using rule 21 (basic_type -> INTTYPE .)
    GT              reduce using rule 21 (basic_type -> INTTYPE .)
    LT              reduce using rule 21 (basic_type -> INTTYPE .)
    LE              reduce using rule 21 (basic_type -> INTTYPE .)
    GE              reduce using rule 21 (basic_type -> INTTYPE .)
    EQ              reduce using rule 21 (basic_type -> INTTYPE .)
    NE              reduce using rule 21 (basic_type -> INTTYPE .)
    OR              reduce using rule 21 (basic_type -> INTTYPE .)
    AND             reduce using rule 21 (basic_type -> INTTYPE .)
    COMMA           reduce using rule 21 (basic_type -> INTTYPE .)
    MODULO          reduce using rule 21 (basic_type -> INTTYPE .)
    INCREMENT       reduce using rule 21 (basic_type -> INTTYPE .)
    DECREMENT       reduce using rule 21 (basic_type -> INTTYPE .)
    EQUALS          reduce using rule 21 (basic_type -> INTTYPE .)
    TIMESEQUAL      reduce using rule 21 (basic_type -> INTTYPE .)
    DIVEQUAL        reduce using rule 21 (basic_type -> INTTYPE .)
    MODEQUAL        reduce using rule 21 (basic_type -> INTTYPE .)
    PLUSEQUAL       reduce using rule 21 (basic_type -> INTTYPE .)
    MINUSEQUAL      reduce using rule 21 (basic_type -> INTTYPE .)
    TERNARY         reduce using rule 21 (basic_type -> INTTYPE .)
    RPAREN          reduce using rule 21 (basic_type -> INTTYPE .)
    RBRACKET        reduce using rule 21 (basic_type -> INTTYPE .)
    COLON           reduce using rule 21 (basic_type -> INTTYPE .)
    ID              reduce using rule 21 (basic_type -> INTTYPE .)


state 16

    (13) global_declaration -> function_declaration .

    INCLUDE         reduce using rule 13 (global_declaration -> function_declaration .)
    VOID            reduce using rule 13 (global_declaration -> function_declaration .)
    INTTYPE         reduce using rule 13 (global_declaration -> function_declaration .)
    CHARTYPE        reduce using rule 13 (global_declaration -> function_declaration .)
    BOOLTYPE        reduce using rule 13 (global_declaration -> function_declaration .)
    DOUBLETYPE      reduce using rule 13 (global_declaration -> function_declaration .)
    $end            reduce using rule 13 (global_declaration -> function_declaration .)


state 17

    (15) variable_declaration -> type . many_declarators SEMI
    (30) function_with_result_type -> type . ID
    (16) many_declarators -> . declarator
    (17) many_declarators -> . declarator COMMA many_declarators
    (27) declarator -> . decl_identifier
    (28) declarator -> . decl_identifier LBRACKET constant_expression RBRACKET
    (26) decl_identifier -> . ID

    ID              shift and go to state 34

    many_declarators               shift and go to state 33
    decl_identifier                shift and go to state 32
    declarator                     shift and go to state 31

state 18

    (24) basic_type -> DOUBLETYPE .

    TIMES           reduce using rule 24 (basic_type -> DOUBLETYPE .)
    LBRACKET        reduce using rule 24 (basic_type -> DOUBLETYPE .)
    SEMI            reduce using rule 24 (basic_type -> DOUBLETYPE .)
    DIVIDE          reduce using rule 24 (basic_type -> DOUBLETYPE .)
    PLUS            reduce using rule 24 (basic_type -> DOUBLETYPE .)
    MINUS           reduce using rule 24 (basic_type -> DOUBLETYPE .)
    GT              reduce using rule 24 (basic_type -> DOUBLETYPE .)
    LT              reduce using rule 24 (basic_type -> DOUBLETYPE .)
    LE              reduce using rule 24 (basic_type -> DOUBLETYPE .)
    GE              reduce using rule 24 (basic_type -> DOUBLETYPE .)
    EQ              reduce using rule 24 (basic_type -> DOUBLETYPE .)
    NE              reduce using rule 24 (basic_type -> DOUBLETYPE .)
    OR              reduce using rule 24 (basic_type -> DOUBLETYPE .)
    AND             reduce using rule 24 (basic_type -> DOUBLETYPE .)
    COMMA           reduce using rule 24 (basic_type -> DOUBLETYPE .)
    MODULO          reduce using rule 24 (basic_type -> DOUBLETYPE .)
    INCREMENT       reduce using rule 24 (basic_type -> DOUBLETYPE .)
    DECREMENT       reduce using rule 24 (basic_type -> DOUBLETYPE .)
    EQUALS          reduce using rule 24 (basic_type -> DOUBLETYPE .)
    TIMESEQUAL      reduce using rule 24 (basic_type -> DOUBLETYPE .)
    DIVEQUAL        reduce using rule 24 (basic_type -> DOUBLETYPE .)
    MODEQUAL        reduce using rule 24 (basic_type -> DOUBLETYPE .)
    PLUSEQUAL       reduce using rule 24 (basic_type -> DOUBLETYPE .)
    MINUSEQUAL      reduce using rule 24 (basic_type -> DOUBLETYPE .)
    TERNARY         reduce using rule 24 (basic_type -> DOUBLETYPE .)
    RPAREN          reduce using rule 24 (basic_type -> DOUBLETYPE .)
    RBRACKET        reduce using rule 24 (basic_type -> DOUBLETYPE .)
    COLON           reduce using rule 24 (basic_type -> DOUBLETYPE .)
    ID              reduce using rule 24 (basic_type -> DOUBLETYPE .)


state 19

    (29) function_declaration -> function_with_result_type . LPAREN maybe_parameter_list RPAREN SEMI
    (39) function_with_result_and_parameters -> function_with_result_type . LPAREN maybe_parameter_list RPAREN LBRACE

    LPAREN          shift and go to state 35


state 20

    (38) function_definition -> function_with_result_and_parameters declarations . statements RBRACE
    (41) statements -> . empty
    (42) statements -> . statement statements
    (136) empty -> .
    (43) statement -> . SEMI
    (44) statement -> . expression SEMI
    (45) statement -> . LBRACE new_scope statements RBRACE
    (46) statement -> . IF LPAREN expression RPAREN statement maybe_else
    (47) statement -> . for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
    (48) statement -> . CONTINUE maybe_id SEMI
    (49) statement -> . BREAK maybe_id SEMI
    (50) statement -> . RETURN maybe_expression SEMI
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (51) for_loop -> . FOR
    (52) for_loop -> . ID COLON FOR
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    RBRACE          reduce using rule 136 (empty -> .)
    SEMI            shift and go to state 50
    LBRACE          shift and go to state 73
    IF              shift and go to state 70
    CONTINUE        shift and go to state 78
    BREAK           shift and go to state 77
    RETURN          shift and go to state 72
    FOR             shift and go to state 62
    ID              shift and go to state 51
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    statements                     shift and go to state 37
    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    statement                      shift and go to state 53
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    right_assignment               shift and go to state 64
    empty                          shift and go to state 58
    function_with_acts             shift and go to state 59
    for_loop                       shift and go to state 61
    ufo                            shift and go to state 63
    type_casting                   shift and go to state 57
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    constant_value                 shift and go to state 81
    identifier                     shift and go to state 82
    expression                     shift and go to state 83
    delete                         shift and go to state 84

state 21

    (6) declaration -> variable_declaration .

    VOID            reduce using rule 6 (declaration -> variable_declaration .)
    INTTYPE         reduce using rule 6 (declaration -> variable_declaration .)
    CHARTYPE        reduce using rule 6 (declaration -> variable_declaration .)
    BOOLTYPE        reduce using rule 6 (declaration -> variable_declaration .)
    DOUBLETYPE      reduce using rule 6 (declaration -> variable_declaration .)
    SEMI            reduce using rule 6 (declaration -> variable_declaration .)
    LBRACE          reduce using rule 6 (declaration -> variable_declaration .)
    IF              reduce using rule 6 (declaration -> variable_declaration .)
    CONTINUE        reduce using rule 6 (declaration -> variable_declaration .)
    BREAK           reduce using rule 6 (declaration -> variable_declaration .)
    RETURN          reduce using rule 6 (declaration -> variable_declaration .)
    FOR             reduce using rule 6 (declaration -> variable_declaration .)
    ID              reduce using rule 6 (declaration -> variable_declaration .)
    LPAREN          reduce using rule 6 (declaration -> variable_declaration .)
    TRUE            reduce using rule 6 (declaration -> variable_declaration .)
    FALSE           reduce using rule 6 (declaration -> variable_declaration .)
    NULL            reduce using rule 6 (declaration -> variable_declaration .)
    ADDRESS         reduce using rule 6 (declaration -> variable_declaration .)
    TIMES           reduce using rule 6 (declaration -> variable_declaration .)
    PLUS            reduce using rule 6 (declaration -> variable_declaration .)
    MINUS           reduce using rule 6 (declaration -> variable_declaration .)
    NOT             reduce using rule 6 (declaration -> variable_declaration .)
    INCREMENT       reduce using rule 6 (declaration -> variable_declaration .)
    DECREMENT       reduce using rule 6 (declaration -> variable_declaration .)
    NEW             reduce using rule 6 (declaration -> variable_declaration .)
    DELETE          reduce using rule 6 (declaration -> variable_declaration .)
    INTEGER         reduce using rule 6 (declaration -> variable_declaration .)
    CHAR            reduce using rule 6 (declaration -> variable_declaration .)
    DOUBLE          reduce using rule 6 (declaration -> variable_declaration .)
    STRING          reduce using rule 6 (declaration -> variable_declaration .)
    RBRACE          reduce using rule 6 (declaration -> variable_declaration .)


state 22

    (4) declarations -> empty .

    SEMI            reduce using rule 4 (declarations -> empty .)
    LBRACE          reduce using rule 4 (declarations -> empty .)
    IF              reduce using rule 4 (declarations -> empty .)
    CONTINUE        reduce using rule 4 (declarations -> empty .)
    BREAK           reduce using rule 4 (declarations -> empty .)
    RETURN          reduce using rule 4 (declarations -> empty .)
    FOR             reduce using rule 4 (declarations -> empty .)
    ID              reduce using rule 4 (declarations -> empty .)
    LPAREN          reduce using rule 4 (declarations -> empty .)
    TRUE            reduce using rule 4 (declarations -> empty .)
    FALSE           reduce using rule 4 (declarations -> empty .)
    NULL            reduce using rule 4 (declarations -> empty .)
    ADDRESS         reduce using rule 4 (declarations -> empty .)
    TIMES           reduce using rule 4 (declarations -> empty .)
    PLUS            reduce using rule 4 (declarations -> empty .)
    MINUS           reduce using rule 4 (declarations -> empty .)
    NOT             reduce using rule 4 (declarations -> empty .)
    INCREMENT       reduce using rule 4 (declarations -> empty .)
    DECREMENT       reduce using rule 4 (declarations -> empty .)
    NEW             reduce using rule 4 (declarations -> empty .)
    DELETE          reduce using rule 4 (declarations -> empty .)
    INTEGER         reduce using rule 4 (declarations -> empty .)
    CHAR            reduce using rule 4 (declarations -> empty .)
    DOUBLE          reduce using rule 4 (declarations -> empty .)
    STRING          reduce using rule 4 (declarations -> empty .)
    RBRACE          reduce using rule 4 (declarations -> empty .)


state 23

    (5) declarations -> declaration . declarations
    (4) declarations -> . empty
    (5) declarations -> . declaration declarations
    (136) empty -> .
    (6) declaration -> . variable_declaration
    (7) declaration -> . function_declaration
    (8) declaration -> . function_definition
    (15) variable_declaration -> . type many_declarators SEMI
    (29) function_declaration -> . function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI
    (38) function_definition -> . function_with_result_and_parameters declarations statements RBRACE
    (18) type -> . basic_type maybe_pointer
    (30) function_with_result_type -> . type ID
    (31) function_with_result_type -> . VOID ID
    (39) function_with_result_and_parameters -> . function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    SEMI            reduce using rule 136 (empty -> .)
    LBRACE          reduce using rule 136 (empty -> .)
    IF              reduce using rule 136 (empty -> .)
    CONTINUE        reduce using rule 136 (empty -> .)
    BREAK           reduce using rule 136 (empty -> .)
    RETURN          reduce using rule 136 (empty -> .)
    FOR             reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    LPAREN          reduce using rule 136 (empty -> .)
    TRUE            reduce using rule 136 (empty -> .)
    FALSE           reduce using rule 136 (empty -> .)
    NULL            reduce using rule 136 (empty -> .)
    ADDRESS         reduce using rule 136 (empty -> .)
    TIMES           reduce using rule 136 (empty -> .)
    PLUS            reduce using rule 136 (empty -> .)
    MINUS           reduce using rule 136 (empty -> .)
    NOT             reduce using rule 136 (empty -> .)
    INCREMENT       reduce using rule 136 (empty -> .)
    DECREMENT       reduce using rule 136 (empty -> .)
    NEW             reduce using rule 136 (empty -> .)
    DELETE          reduce using rule 136 (empty -> .)
    INTEGER         reduce using rule 136 (empty -> .)
    CHAR            reduce using rule 136 (empty -> .)
    DOUBLE          reduce using rule 136 (empty -> .)
    STRING          reduce using rule 136 (empty -> .)
    RBRACE          reduce using rule 136 (empty -> .)
    VOID            shift and go to state 6
    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    function_with_result_and_parameters shift and go to state 4
    function_definition            shift and go to state 24
    function_declaration           shift and go to state 25
    basic_type                     shift and go to state 5
    declarations                   shift and go to state 85
    function_with_result_type      shift and go to state 19
    declaration                    shift and go to state 23
    type                           shift and go to state 17
    variable_declaration           shift and go to state 21
    empty                          shift and go to state 22

state 24

    (8) declaration -> function_definition .

    VOID            reduce using rule 8 (declaration -> function_definition .)
    INTTYPE         reduce using rule 8 (declaration -> function_definition .)
    CHARTYPE        reduce using rule 8 (declaration -> function_definition .)
    BOOLTYPE        reduce using rule 8 (declaration -> function_definition .)
    DOUBLETYPE      reduce using rule 8 (declaration -> function_definition .)
    SEMI            reduce using rule 8 (declaration -> function_definition .)
    LBRACE          reduce using rule 8 (declaration -> function_definition .)
    IF              reduce using rule 8 (declaration -> function_definition .)
    CONTINUE        reduce using rule 8 (declaration -> function_definition .)
    BREAK           reduce using rule 8 (declaration -> function_definition .)
    RETURN          reduce using rule 8 (declaration -> function_definition .)
    FOR             reduce using rule 8 (declaration -> function_definition .)
    ID              reduce using rule 8 (declaration -> function_definition .)
    LPAREN          reduce using rule 8 (declaration -> function_definition .)
    TRUE            reduce using rule 8 (declaration -> function_definition .)
    FALSE           reduce using rule 8 (declaration -> function_definition .)
    NULL            reduce using rule 8 (declaration -> function_definition .)
    ADDRESS         reduce using rule 8 (declaration -> function_definition .)
    TIMES           reduce using rule 8 (declaration -> function_definition .)
    PLUS            reduce using rule 8 (declaration -> function_definition .)
    MINUS           reduce using rule 8 (declaration -> function_definition .)
    NOT             reduce using rule 8 (declaration -> function_definition .)
    INCREMENT       reduce using rule 8 (declaration -> function_definition .)
    DECREMENT       reduce using rule 8 (declaration -> function_definition .)
    NEW             reduce using rule 8 (declaration -> function_definition .)
    DELETE          reduce using rule 8 (declaration -> function_definition .)
    INTEGER         reduce using rule 8 (declaration -> function_definition .)
    CHAR            reduce using rule 8 (declaration -> function_definition .)
    DOUBLE          reduce using rule 8 (declaration -> function_definition .)
    STRING          reduce using rule 8 (declaration -> function_definition .)
    RBRACE          reduce using rule 8 (declaration -> function_definition .)


state 25

    (7) declaration -> function_declaration .

    VOID            reduce using rule 7 (declaration -> function_declaration .)
    INTTYPE         reduce using rule 7 (declaration -> function_declaration .)
    CHARTYPE        reduce using rule 7 (declaration -> function_declaration .)
    BOOLTYPE        reduce using rule 7 (declaration -> function_declaration .)
    DOUBLETYPE      reduce using rule 7 (declaration -> function_declaration .)
    SEMI            reduce using rule 7 (declaration -> function_declaration .)
    LBRACE          reduce using rule 7 (declaration -> function_declaration .)
    IF              reduce using rule 7 (declaration -> function_declaration .)
    CONTINUE        reduce using rule 7 (declaration -> function_declaration .)
    BREAK           reduce using rule 7 (declaration -> function_declaration .)
    RETURN          reduce using rule 7 (declaration -> function_declaration .)
    FOR             reduce using rule 7 (declaration -> function_declaration .)
    ID              reduce using rule 7 (declaration -> function_declaration .)
    LPAREN          reduce using rule 7 (declaration -> function_declaration .)
    TRUE            reduce using rule 7 (declaration -> function_declaration .)
    FALSE           reduce using rule 7 (declaration -> function_declaration .)
    NULL            reduce using rule 7 (declaration -> function_declaration .)
    ADDRESS         reduce using rule 7 (declaration -> function_declaration .)
    TIMES           reduce using rule 7 (declaration -> function_declaration .)
    PLUS            reduce using rule 7 (declaration -> function_declaration .)
    MINUS           reduce using rule 7 (declaration -> function_declaration .)
    NOT             reduce using rule 7 (declaration -> function_declaration .)
    INCREMENT       reduce using rule 7 (declaration -> function_declaration .)
    DECREMENT       reduce using rule 7 (declaration -> function_declaration .)
    NEW             reduce using rule 7 (declaration -> function_declaration .)
    DELETE          reduce using rule 7 (declaration -> function_declaration .)
    INTEGER         reduce using rule 7 (declaration -> function_declaration .)
    CHAR            reduce using rule 7 (declaration -> function_declaration .)
    DOUBLE          reduce using rule 7 (declaration -> function_declaration .)
    STRING          reduce using rule 7 (declaration -> function_declaration .)
    RBRACE          reduce using rule 7 (declaration -> function_declaration .)


state 26

    (20) maybe_pointer -> TIMES . maybe_pointer
    (19) maybe_pointer -> . empty
    (20) maybe_pointer -> . TIMES maybe_pointer
    (136) empty -> .

    TIMES           shift and go to state 26
    ID              reduce using rule 136 (empty -> .)
    LBRACKET        reduce using rule 136 (empty -> .)
    SEMI            reduce using rule 136 (empty -> .)
    DIVIDE          reduce using rule 136 (empty -> .)
    PLUS            reduce using rule 136 (empty -> .)
    MINUS           reduce using rule 136 (empty -> .)
    GT              reduce using rule 136 (empty -> .)
    LT              reduce using rule 136 (empty -> .)
    LE              reduce using rule 136 (empty -> .)
    GE              reduce using rule 136 (empty -> .)
    EQ              reduce using rule 136 (empty -> .)
    NE              reduce using rule 136 (empty -> .)
    OR              reduce using rule 136 (empty -> .)
    AND             reduce using rule 136 (empty -> .)
    COMMA           reduce using rule 136 (empty -> .)
    MODULO          reduce using rule 136 (empty -> .)
    INCREMENT       reduce using rule 136 (empty -> .)
    DECREMENT       reduce using rule 136 (empty -> .)
    EQUALS          reduce using rule 136 (empty -> .)
    TIMESEQUAL      reduce using rule 136 (empty -> .)
    DIVEQUAL        reduce using rule 136 (empty -> .)
    MODEQUAL        reduce using rule 136 (empty -> .)
    PLUSEQUAL       reduce using rule 136 (empty -> .)
    MINUSEQUAL      reduce using rule 136 (empty -> .)
    TERNARY         reduce using rule 136 (empty -> .)
    RPAREN          reduce using rule 136 (empty -> .)
    RBRACKET        reduce using rule 136 (empty -> .)
    COLON           reduce using rule 136 (empty -> .)

  ! TIMES           [ reduce using rule 136 (empty -> .) ]

    empty                          shift and go to state 27
    maybe_pointer                  shift and go to state 86

state 27

    (19) maybe_pointer -> empty .

    ID              reduce using rule 19 (maybe_pointer -> empty .)
    LBRACKET        reduce using rule 19 (maybe_pointer -> empty .)
    SEMI            reduce using rule 19 (maybe_pointer -> empty .)
    TIMES           reduce using rule 19 (maybe_pointer -> empty .)
    DIVIDE          reduce using rule 19 (maybe_pointer -> empty .)
    PLUS            reduce using rule 19 (maybe_pointer -> empty .)
    MINUS           reduce using rule 19 (maybe_pointer -> empty .)
    GT              reduce using rule 19 (maybe_pointer -> empty .)
    LT              reduce using rule 19 (maybe_pointer -> empty .)
    LE              reduce using rule 19 (maybe_pointer -> empty .)
    GE              reduce using rule 19 (maybe_pointer -> empty .)
    EQ              reduce using rule 19 (maybe_pointer -> empty .)
    NE              reduce using rule 19 (maybe_pointer -> empty .)
    OR              reduce using rule 19 (maybe_pointer -> empty .)
    AND             reduce using rule 19 (maybe_pointer -> empty .)
    COMMA           reduce using rule 19 (maybe_pointer -> empty .)
    MODULO          reduce using rule 19 (maybe_pointer -> empty .)
    INCREMENT       reduce using rule 19 (maybe_pointer -> empty .)
    DECREMENT       reduce using rule 19 (maybe_pointer -> empty .)
    EQUALS          reduce using rule 19 (maybe_pointer -> empty .)
    TIMESEQUAL      reduce using rule 19 (maybe_pointer -> empty .)
    DIVEQUAL        reduce using rule 19 (maybe_pointer -> empty .)
    MODEQUAL        reduce using rule 19 (maybe_pointer -> empty .)
    PLUSEQUAL       reduce using rule 19 (maybe_pointer -> empty .)
    MINUSEQUAL      reduce using rule 19 (maybe_pointer -> empty .)
    TERNARY         reduce using rule 19 (maybe_pointer -> empty .)
    RPAREN          reduce using rule 19 (maybe_pointer -> empty .)
    RBRACKET        reduce using rule 19 (maybe_pointer -> empty .)
    COLON           reduce using rule 19 (maybe_pointer -> empty .)


state 28

    (18) type -> basic_type maybe_pointer .

    ID              reduce using rule 18 (type -> basic_type maybe_pointer .)
    RPAREN          reduce using rule 18 (type -> basic_type maybe_pointer .)
    LBRACKET        reduce using rule 18 (type -> basic_type maybe_pointer .)
    SEMI            reduce using rule 18 (type -> basic_type maybe_pointer .)
    TIMES           reduce using rule 18 (type -> basic_type maybe_pointer .)
    DIVIDE          reduce using rule 18 (type -> basic_type maybe_pointer .)
    PLUS            reduce using rule 18 (type -> basic_type maybe_pointer .)
    MINUS           reduce using rule 18 (type -> basic_type maybe_pointer .)
    GT              reduce using rule 18 (type -> basic_type maybe_pointer .)
    LT              reduce using rule 18 (type -> basic_type maybe_pointer .)
    LE              reduce using rule 18 (type -> basic_type maybe_pointer .)
    GE              reduce using rule 18 (type -> basic_type maybe_pointer .)
    EQ              reduce using rule 18 (type -> basic_type maybe_pointer .)
    NE              reduce using rule 18 (type -> basic_type maybe_pointer .)
    OR              reduce using rule 18 (type -> basic_type maybe_pointer .)
    AND             reduce using rule 18 (type -> basic_type maybe_pointer .)
    COMMA           reduce using rule 18 (type -> basic_type maybe_pointer .)
    MODULO          reduce using rule 18 (type -> basic_type maybe_pointer .)
    INCREMENT       reduce using rule 18 (type -> basic_type maybe_pointer .)
    DECREMENT       reduce using rule 18 (type -> basic_type maybe_pointer .)
    EQUALS          reduce using rule 18 (type -> basic_type maybe_pointer .)
    TIMESEQUAL      reduce using rule 18 (type -> basic_type maybe_pointer .)
    DIVEQUAL        reduce using rule 18 (type -> basic_type maybe_pointer .)
    MODEQUAL        reduce using rule 18 (type -> basic_type maybe_pointer .)
    PLUSEQUAL       reduce using rule 18 (type -> basic_type maybe_pointer .)
    MINUSEQUAL      reduce using rule 18 (type -> basic_type maybe_pointer .)
    TERNARY         reduce using rule 18 (type -> basic_type maybe_pointer .)
    RBRACKET        reduce using rule 18 (type -> basic_type maybe_pointer .)
    COLON           reduce using rule 18 (type -> basic_type maybe_pointer .)


state 29

    (31) function_with_result_type -> VOID ID .

    LPAREN          reduce using rule 31 (function_with_result_type -> VOID ID .)


state 30

    (10) global_declarations -> global_declaration global_declarations .

    $end            reduce using rule 10 (global_declarations -> global_declaration global_declarations .)


state 31

    (16) many_declarators -> declarator .
    (17) many_declarators -> declarator . COMMA many_declarators

    SEMI            reduce using rule 16 (many_declarators -> declarator .)
    COMMA           shift and go to state 87


state 32

    (27) declarator -> decl_identifier .
    (28) declarator -> decl_identifier . LBRACKET constant_expression RBRACKET

    COMMA           reduce using rule 27 (declarator -> decl_identifier .)
    SEMI            reduce using rule 27 (declarator -> decl_identifier .)
    LBRACKET        shift and go to state 88


state 33

    (15) variable_declaration -> type many_declarators . SEMI

    SEMI            shift and go to state 89


state 34

    (30) function_with_result_type -> type ID .
    (26) decl_identifier -> ID .

    LPAREN          reduce using rule 30 (function_with_result_type -> type ID .)
    LBRACKET        reduce using rule 26 (decl_identifier -> ID .)
    COMMA           reduce using rule 26 (decl_identifier -> ID .)
    SEMI            reduce using rule 26 (decl_identifier -> ID .)


state 35

    (29) function_declaration -> function_with_result_type LPAREN . maybe_parameter_list RPAREN SEMI
    (39) function_with_result_and_parameters -> function_with_result_type LPAREN . maybe_parameter_list RPAREN LBRACE
    (32) maybe_parameter_list -> . empty
    (33) maybe_parameter_list -> . parameter_list
    (136) empty -> .
    (34) parameter_list -> . parameter
    (35) parameter_list -> . parameter COMMA parameter_list
    (36) parameter -> . type decl_identifier
    (37) parameter -> . BYREF type decl_identifier
    (18) type -> . basic_type maybe_pointer
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    RPAREN          reduce using rule 136 (empty -> .)
    BYREF           shift and go to state 93
    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    basic_type                     shift and go to state 5
    parameter_list                 shift and go to state 90
    parameter                      shift and go to state 94
    maybe_parameter_list           shift and go to state 92
    type                           shift and go to state 91
    empty                          shift and go to state 95

state 36

    (111) left_assignment -> INCREMENT . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 97
    delete                         shift and go to state 84

state 37

    (38) function_definition -> function_with_result_and_parameters declarations statements . RBRACE

    RBRACE          shift and go to state 98


state 38

    (128) constant_value -> constant_value_char .

    LBRACKET        reduce using rule 128 (constant_value -> constant_value_char .)
    TIMES           reduce using rule 128 (constant_value -> constant_value_char .)
    DIVIDE          reduce using rule 128 (constant_value -> constant_value_char .)
    PLUS            reduce using rule 128 (constant_value -> constant_value_char .)
    MINUS           reduce using rule 128 (constant_value -> constant_value_char .)
    GT              reduce using rule 128 (constant_value -> constant_value_char .)
    LT              reduce using rule 128 (constant_value -> constant_value_char .)
    LE              reduce using rule 128 (constant_value -> constant_value_char .)
    GE              reduce using rule 128 (constant_value -> constant_value_char .)
    EQ              reduce using rule 128 (constant_value -> constant_value_char .)
    NE              reduce using rule 128 (constant_value -> constant_value_char .)
    OR              reduce using rule 128 (constant_value -> constant_value_char .)
    AND             reduce using rule 128 (constant_value -> constant_value_char .)
    COMMA           reduce using rule 128 (constant_value -> constant_value_char .)
    MODULO          reduce using rule 128 (constant_value -> constant_value_char .)
    INCREMENT       reduce using rule 128 (constant_value -> constant_value_char .)
    DECREMENT       reduce using rule 128 (constant_value -> constant_value_char .)
    EQUALS          reduce using rule 128 (constant_value -> constant_value_char .)
    TIMESEQUAL      reduce using rule 128 (constant_value -> constant_value_char .)
    DIVEQUAL        reduce using rule 128 (constant_value -> constant_value_char .)
    MODEQUAL        reduce using rule 128 (constant_value -> constant_value_char .)
    PLUSEQUAL       reduce using rule 128 (constant_value -> constant_value_char .)
    MINUSEQUAL      reduce using rule 128 (constant_value -> constant_value_char .)
    TERNARY         reduce using rule 128 (constant_value -> constant_value_char .)
    SEMI            reduce using rule 128 (constant_value -> constant_value_char .)
    RPAREN          reduce using rule 128 (constant_value -> constant_value_char .)
    RBRACKET        reduce using rule 128 (constant_value -> constant_value_char .)
    COLON           reduce using rule 128 (constant_value -> constant_value_char .)


state 39

    (130) constant_value -> constant_value_string .

    LBRACKET        reduce using rule 130 (constant_value -> constant_value_string .)
    TIMES           reduce using rule 130 (constant_value -> constant_value_string .)
    DIVIDE          reduce using rule 130 (constant_value -> constant_value_string .)
    PLUS            reduce using rule 130 (constant_value -> constant_value_string .)
    MINUS           reduce using rule 130 (constant_value -> constant_value_string .)
    GT              reduce using rule 130 (constant_value -> constant_value_string .)
    LT              reduce using rule 130 (constant_value -> constant_value_string .)
    LE              reduce using rule 130 (constant_value -> constant_value_string .)
    GE              reduce using rule 130 (constant_value -> constant_value_string .)
    EQ              reduce using rule 130 (constant_value -> constant_value_string .)
    NE              reduce using rule 130 (constant_value -> constant_value_string .)
    OR              reduce using rule 130 (constant_value -> constant_value_string .)
    AND             reduce using rule 130 (constant_value -> constant_value_string .)
    COMMA           reduce using rule 130 (constant_value -> constant_value_string .)
    MODULO          reduce using rule 130 (constant_value -> constant_value_string .)
    INCREMENT       reduce using rule 130 (constant_value -> constant_value_string .)
    DECREMENT       reduce using rule 130 (constant_value -> constant_value_string .)
    EQUALS          reduce using rule 130 (constant_value -> constant_value_string .)
    TIMESEQUAL      reduce using rule 130 (constant_value -> constant_value_string .)
    DIVEQUAL        reduce using rule 130 (constant_value -> constant_value_string .)
    MODEQUAL        reduce using rule 130 (constant_value -> constant_value_string .)
    PLUSEQUAL       reduce using rule 130 (constant_value -> constant_value_string .)
    MINUSEQUAL      reduce using rule 130 (constant_value -> constant_value_string .)
    TERNARY         reduce using rule 130 (constant_value -> constant_value_string .)
    SEMI            reduce using rule 130 (constant_value -> constant_value_string .)
    RPAREN          reduce using rule 130 (constant_value -> constant_value_string .)
    RBRACKET        reduce using rule 130 (constant_value -> constant_value_string .)
    COLON           reduce using rule 130 (constant_value -> constant_value_string .)


state 40

    (123) delete -> DELETE . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 99
    delete                         shift and go to state 84

state 41

    (62) expression -> function_call .

    SEMI            reduce using rule 62 (expression -> function_call .)
    LBRACKET        reduce using rule 62 (expression -> function_call .)
    TIMES           reduce using rule 62 (expression -> function_call .)
    DIVIDE          reduce using rule 62 (expression -> function_call .)
    PLUS            reduce using rule 62 (expression -> function_call .)
    MINUS           reduce using rule 62 (expression -> function_call .)
    GT              reduce using rule 62 (expression -> function_call .)
    LT              reduce using rule 62 (expression -> function_call .)
    LE              reduce using rule 62 (expression -> function_call .)
    GE              reduce using rule 62 (expression -> function_call .)
    EQ              reduce using rule 62 (expression -> function_call .)
    NE              reduce using rule 62 (expression -> function_call .)
    OR              reduce using rule 62 (expression -> function_call .)
    AND             reduce using rule 62 (expression -> function_call .)
    COMMA           reduce using rule 62 (expression -> function_call .)
    MODULO          reduce using rule 62 (expression -> function_call .)
    INCREMENT       reduce using rule 62 (expression -> function_call .)
    DECREMENT       reduce using rule 62 (expression -> function_call .)
    EQUALS          reduce using rule 62 (expression -> function_call .)
    TIMESEQUAL      reduce using rule 62 (expression -> function_call .)
    DIVEQUAL        reduce using rule 62 (expression -> function_call .)
    MODEQUAL        reduce using rule 62 (expression -> function_call .)
    PLUSEQUAL       reduce using rule 62 (expression -> function_call .)
    MINUSEQUAL      reduce using rule 62 (expression -> function_call .)
    TERNARY         reduce using rule 62 (expression -> function_call .)
    RPAREN          reduce using rule 62 (expression -> function_call .)
    RBRACKET        reduce using rule 62 (expression -> function_call .)
    COLON           reduce using rule 62 (expression -> function_call .)


state 42

    (129) constant_value -> constant_value_double .

    LBRACKET        reduce using rule 129 (constant_value -> constant_value_double .)
    TIMES           reduce using rule 129 (constant_value -> constant_value_double .)
    DIVIDE          reduce using rule 129 (constant_value -> constant_value_double .)
    PLUS            reduce using rule 129 (constant_value -> constant_value_double .)
    MINUS           reduce using rule 129 (constant_value -> constant_value_double .)
    GT              reduce using rule 129 (constant_value -> constant_value_double .)
    LT              reduce using rule 129 (constant_value -> constant_value_double .)
    LE              reduce using rule 129 (constant_value -> constant_value_double .)
    GE              reduce using rule 129 (constant_value -> constant_value_double .)
    EQ              reduce using rule 129 (constant_value -> constant_value_double .)
    NE              reduce using rule 129 (constant_value -> constant_value_double .)
    OR              reduce using rule 129 (constant_value -> constant_value_double .)
    AND             reduce using rule 129 (constant_value -> constant_value_double .)
    COMMA           reduce using rule 129 (constant_value -> constant_value_double .)
    MODULO          reduce using rule 129 (constant_value -> constant_value_double .)
    INCREMENT       reduce using rule 129 (constant_value -> constant_value_double .)
    DECREMENT       reduce using rule 129 (constant_value -> constant_value_double .)
    EQUALS          reduce using rule 129 (constant_value -> constant_value_double .)
    TIMESEQUAL      reduce using rule 129 (constant_value -> constant_value_double .)
    DIVEQUAL        reduce using rule 129 (constant_value -> constant_value_double .)
    MODEQUAL        reduce using rule 129 (constant_value -> constant_value_double .)
    PLUSEQUAL       reduce using rule 129 (constant_value -> constant_value_double .)
    MINUSEQUAL      reduce using rule 129 (constant_value -> constant_value_double .)
    TERNARY         reduce using rule 129 (constant_value -> constant_value_double .)
    SEMI            reduce using rule 129 (constant_value -> constant_value_double .)
    RPAREN          reduce using rule 129 (constant_value -> constant_value_double .)
    RBRACKET        reduce using rule 129 (constant_value -> constant_value_double .)
    COLON           reduce using rule 129 (constant_value -> constant_value_double .)


state 43

    (127) constant_value -> constant_value_int .

    LBRACKET        reduce using rule 127 (constant_value -> constant_value_int .)
    TIMES           reduce using rule 127 (constant_value -> constant_value_int .)
    DIVIDE          reduce using rule 127 (constant_value -> constant_value_int .)
    PLUS            reduce using rule 127 (constant_value -> constant_value_int .)
    MINUS           reduce using rule 127 (constant_value -> constant_value_int .)
    GT              reduce using rule 127 (constant_value -> constant_value_int .)
    LT              reduce using rule 127 (constant_value -> constant_value_int .)
    LE              reduce using rule 127 (constant_value -> constant_value_int .)
    GE              reduce using rule 127 (constant_value -> constant_value_int .)
    EQ              reduce using rule 127 (constant_value -> constant_value_int .)
    NE              reduce using rule 127 (constant_value -> constant_value_int .)
    OR              reduce using rule 127 (constant_value -> constant_value_int .)
    AND             reduce using rule 127 (constant_value -> constant_value_int .)
    COMMA           reduce using rule 127 (constant_value -> constant_value_int .)
    MODULO          reduce using rule 127 (constant_value -> constant_value_int .)
    INCREMENT       reduce using rule 127 (constant_value -> constant_value_int .)
    DECREMENT       reduce using rule 127 (constant_value -> constant_value_int .)
    EQUALS          reduce using rule 127 (constant_value -> constant_value_int .)
    TIMESEQUAL      reduce using rule 127 (constant_value -> constant_value_int .)
    DIVEQUAL        reduce using rule 127 (constant_value -> constant_value_int .)
    MODEQUAL        reduce using rule 127 (constant_value -> constant_value_int .)
    PLUSEQUAL       reduce using rule 127 (constant_value -> constant_value_int .)
    MINUSEQUAL      reduce using rule 127 (constant_value -> constant_value_int .)
    TERNARY         reduce using rule 127 (constant_value -> constant_value_int .)
    SEMI            reduce using rule 127 (constant_value -> constant_value_int .)
    RPAREN          reduce using rule 127 (constant_value -> constant_value_int .)
    RBRACKET        reduce using rule 127 (constant_value -> constant_value_int .)
    COLON           reduce using rule 127 (constant_value -> constant_value_int .)


state 44

    (68) expression -> whole_assignment .

    SEMI            reduce using rule 68 (expression -> whole_assignment .)
    LBRACKET        reduce using rule 68 (expression -> whole_assignment .)
    TIMES           reduce using rule 68 (expression -> whole_assignment .)
    DIVIDE          reduce using rule 68 (expression -> whole_assignment .)
    PLUS            reduce using rule 68 (expression -> whole_assignment .)
    MINUS           reduce using rule 68 (expression -> whole_assignment .)
    GT              reduce using rule 68 (expression -> whole_assignment .)
    LT              reduce using rule 68 (expression -> whole_assignment .)
    LE              reduce using rule 68 (expression -> whole_assignment .)
    GE              reduce using rule 68 (expression -> whole_assignment .)
    EQ              reduce using rule 68 (expression -> whole_assignment .)
    NE              reduce using rule 68 (expression -> whole_assignment .)
    OR              reduce using rule 68 (expression -> whole_assignment .)
    AND             reduce using rule 68 (expression -> whole_assignment .)
    COMMA           reduce using rule 68 (expression -> whole_assignment .)
    MODULO          reduce using rule 68 (expression -> whole_assignment .)
    INCREMENT       reduce using rule 68 (expression -> whole_assignment .)
    DECREMENT       reduce using rule 68 (expression -> whole_assignment .)
    EQUALS          reduce using rule 68 (expression -> whole_assignment .)
    TIMESEQUAL      reduce using rule 68 (expression -> whole_assignment .)
    DIVEQUAL        reduce using rule 68 (expression -> whole_assignment .)
    MODEQUAL        reduce using rule 68 (expression -> whole_assignment .)
    PLUSEQUAL       reduce using rule 68 (expression -> whole_assignment .)
    MINUSEQUAL      reduce using rule 68 (expression -> whole_assignment .)
    TERNARY         reduce using rule 68 (expression -> whole_assignment .)
    RPAREN          reduce using rule 68 (expression -> whole_assignment .)
    RBRACKET        reduce using rule 68 (expression -> whole_assignment .)
    COLON           reduce using rule 68 (expression -> whole_assignment .)


state 45

    (126) constant_value -> NULL .

    LBRACKET        reduce using rule 126 (constant_value -> NULL .)
    TIMES           reduce using rule 126 (constant_value -> NULL .)
    DIVIDE          reduce using rule 126 (constant_value -> NULL .)
    PLUS            reduce using rule 126 (constant_value -> NULL .)
    MINUS           reduce using rule 126 (constant_value -> NULL .)
    GT              reduce using rule 126 (constant_value -> NULL .)
    LT              reduce using rule 126 (constant_value -> NULL .)
    LE              reduce using rule 126 (constant_value -> NULL .)
    GE              reduce using rule 126 (constant_value -> NULL .)
    EQ              reduce using rule 126 (constant_value -> NULL .)
    NE              reduce using rule 126 (constant_value -> NULL .)
    OR              reduce using rule 126 (constant_value -> NULL .)
    AND             reduce using rule 126 (constant_value -> NULL .)
    COMMA           reduce using rule 126 (constant_value -> NULL .)
    MODULO          reduce using rule 126 (constant_value -> NULL .)
    INCREMENT       reduce using rule 126 (constant_value -> NULL .)
    DECREMENT       reduce using rule 126 (constant_value -> NULL .)
    EQUALS          reduce using rule 126 (constant_value -> NULL .)
    TIMESEQUAL      reduce using rule 126 (constant_value -> NULL .)
    DIVEQUAL        reduce using rule 126 (constant_value -> NULL .)
    MODEQUAL        reduce using rule 126 (constant_value -> NULL .)
    PLUSEQUAL       reduce using rule 126 (constant_value -> NULL .)
    MINUSEQUAL      reduce using rule 126 (constant_value -> NULL .)
    TERNARY         reduce using rule 126 (constant_value -> NULL .)
    SEMI            reduce using rule 126 (constant_value -> NULL .)
    RPAREN          reduce using rule 126 (constant_value -> NULL .)
    RBRACKET        reduce using rule 126 (constant_value -> NULL .)
    COLON           reduce using rule 126 (constant_value -> NULL .)


state 46

    (124) constant_value -> TRUE .

    LBRACKET        reduce using rule 124 (constant_value -> TRUE .)
    TIMES           reduce using rule 124 (constant_value -> TRUE .)
    DIVIDE          reduce using rule 124 (constant_value -> TRUE .)
    PLUS            reduce using rule 124 (constant_value -> TRUE .)
    MINUS           reduce using rule 124 (constant_value -> TRUE .)
    GT              reduce using rule 124 (constant_value -> TRUE .)
    LT              reduce using rule 124 (constant_value -> TRUE .)
    LE              reduce using rule 124 (constant_value -> TRUE .)
    GE              reduce using rule 124 (constant_value -> TRUE .)
    EQ              reduce using rule 124 (constant_value -> TRUE .)
    NE              reduce using rule 124 (constant_value -> TRUE .)
    OR              reduce using rule 124 (constant_value -> TRUE .)
    AND             reduce using rule 124 (constant_value -> TRUE .)
    COMMA           reduce using rule 124 (constant_value -> TRUE .)
    MODULO          reduce using rule 124 (constant_value -> TRUE .)
    INCREMENT       reduce using rule 124 (constant_value -> TRUE .)
    DECREMENT       reduce using rule 124 (constant_value -> TRUE .)
    EQUALS          reduce using rule 124 (constant_value -> TRUE .)
    TIMESEQUAL      reduce using rule 124 (constant_value -> TRUE .)
    DIVEQUAL        reduce using rule 124 (constant_value -> TRUE .)
    MODEQUAL        reduce using rule 124 (constant_value -> TRUE .)
    PLUSEQUAL       reduce using rule 124 (constant_value -> TRUE .)
    MINUSEQUAL      reduce using rule 124 (constant_value -> TRUE .)
    TERNARY         reduce using rule 124 (constant_value -> TRUE .)
    SEMI            reduce using rule 124 (constant_value -> TRUE .)
    RPAREN          reduce using rule 124 (constant_value -> TRUE .)
    RBRACKET        reduce using rule 124 (constant_value -> TRUE .)
    COLON           reduce using rule 124 (constant_value -> TRUE .)


state 47

    (95) unary_operation -> MINUS . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 100
    delete                         shift and go to state 84

state 48

    (132) constant_value_double -> DOUBLE .

    LBRACKET        reduce using rule 132 (constant_value_double -> DOUBLE .)
    TIMES           reduce using rule 132 (constant_value_double -> DOUBLE .)
    DIVIDE          reduce using rule 132 (constant_value_double -> DOUBLE .)
    PLUS            reduce using rule 132 (constant_value_double -> DOUBLE .)
    MINUS           reduce using rule 132 (constant_value_double -> DOUBLE .)
    GT              reduce using rule 132 (constant_value_double -> DOUBLE .)
    LT              reduce using rule 132 (constant_value_double -> DOUBLE .)
    LE              reduce using rule 132 (constant_value_double -> DOUBLE .)
    GE              reduce using rule 132 (constant_value_double -> DOUBLE .)
    EQ              reduce using rule 132 (constant_value_double -> DOUBLE .)
    NE              reduce using rule 132 (constant_value_double -> DOUBLE .)
    OR              reduce using rule 132 (constant_value_double -> DOUBLE .)
    AND             reduce using rule 132 (constant_value_double -> DOUBLE .)
    COMMA           reduce using rule 132 (constant_value_double -> DOUBLE .)
    MODULO          reduce using rule 132 (constant_value_double -> DOUBLE .)
    INCREMENT       reduce using rule 132 (constant_value_double -> DOUBLE .)
    DECREMENT       reduce using rule 132 (constant_value_double -> DOUBLE .)
    EQUALS          reduce using rule 132 (constant_value_double -> DOUBLE .)
    TIMESEQUAL      reduce using rule 132 (constant_value_double -> DOUBLE .)
    DIVEQUAL        reduce using rule 132 (constant_value_double -> DOUBLE .)
    MODEQUAL        reduce using rule 132 (constant_value_double -> DOUBLE .)
    PLUSEQUAL       reduce using rule 132 (constant_value_double -> DOUBLE .)
    MINUSEQUAL      reduce using rule 132 (constant_value_double -> DOUBLE .)
    TERNARY         reduce using rule 132 (constant_value_double -> DOUBLE .)
    SEMI            reduce using rule 132 (constant_value_double -> DOUBLE .)
    RPAREN          reduce using rule 132 (constant_value_double -> DOUBLE .)
    RBRACKET        reduce using rule 132 (constant_value_double -> DOUBLE .)
    COLON           reduce using rule 132 (constant_value_double -> DOUBLE .)


state 49

    (73) new -> NEW . type
    (74) new -> NEW . type LBRACKET expression RBRACKET
    (18) type -> . basic_type maybe_pointer
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    basic_type                     shift and go to state 5
    type                           shift and go to state 101

state 50

    (43) statement -> SEMI .

    SEMI            reduce using rule 43 (statement -> SEMI .)
    LBRACE          reduce using rule 43 (statement -> SEMI .)
    IF              reduce using rule 43 (statement -> SEMI .)
    CONTINUE        reduce using rule 43 (statement -> SEMI .)
    BREAK           reduce using rule 43 (statement -> SEMI .)
    RETURN          reduce using rule 43 (statement -> SEMI .)
    FOR             reduce using rule 43 (statement -> SEMI .)
    ID              reduce using rule 43 (statement -> SEMI .)
    LPAREN          reduce using rule 43 (statement -> SEMI .)
    TRUE            reduce using rule 43 (statement -> SEMI .)
    FALSE           reduce using rule 43 (statement -> SEMI .)
    NULL            reduce using rule 43 (statement -> SEMI .)
    ADDRESS         reduce using rule 43 (statement -> SEMI .)
    TIMES           reduce using rule 43 (statement -> SEMI .)
    PLUS            reduce using rule 43 (statement -> SEMI .)
    MINUS           reduce using rule 43 (statement -> SEMI .)
    NOT             reduce using rule 43 (statement -> SEMI .)
    INCREMENT       reduce using rule 43 (statement -> SEMI .)
    DECREMENT       reduce using rule 43 (statement -> SEMI .)
    NEW             reduce using rule 43 (statement -> SEMI .)
    DELETE          reduce using rule 43 (statement -> SEMI .)
    INTEGER         reduce using rule 43 (statement -> SEMI .)
    CHAR            reduce using rule 43 (statement -> SEMI .)
    DOUBLE          reduce using rule 43 (statement -> SEMI .)
    STRING          reduce using rule 43 (statement -> SEMI .)
    RBRACE          reduce using rule 43 (statement -> SEMI .)
    ELSE            reduce using rule 43 (statement -> SEMI .)


state 51

    (52) for_loop -> ID . COLON FOR
    (25) identifier -> ID .
    (84) function_call -> ID . LPAREN empty RPAREN
    (86) function_with_acts -> ID . LPAREN

    COLON           shift and go to state 102
    SEMI            reduce using rule 25 (identifier -> ID .)
    LBRACKET        reduce using rule 25 (identifier -> ID .)
    TIMES           reduce using rule 25 (identifier -> ID .)
    DIVIDE          reduce using rule 25 (identifier -> ID .)
    PLUS            reduce using rule 25 (identifier -> ID .)
    MINUS           reduce using rule 25 (identifier -> ID .)
    GT              reduce using rule 25 (identifier -> ID .)
    LT              reduce using rule 25 (identifier -> ID .)
    LE              reduce using rule 25 (identifier -> ID .)
    GE              reduce using rule 25 (identifier -> ID .)
    EQ              reduce using rule 25 (identifier -> ID .)
    NE              reduce using rule 25 (identifier -> ID .)
    OR              reduce using rule 25 (identifier -> ID .)
    AND             reduce using rule 25 (identifier -> ID .)
    COMMA           reduce using rule 25 (identifier -> ID .)
    MODULO          reduce using rule 25 (identifier -> ID .)
    INCREMENT       reduce using rule 25 (identifier -> ID .)
    DECREMENT       reduce using rule 25 (identifier -> ID .)
    EQUALS          reduce using rule 25 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 25 (identifier -> ID .)
    DIVEQUAL        reduce using rule 25 (identifier -> ID .)
    MODEQUAL        reduce using rule 25 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 25 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 25 (identifier -> ID .)
    TERNARY         reduce using rule 25 (identifier -> ID .)
    LPAREN          shift and go to state 103


state 52

    (60) expression -> parenthesial_expression .

    SEMI            reduce using rule 60 (expression -> parenthesial_expression .)
    LBRACKET        reduce using rule 60 (expression -> parenthesial_expression .)
    TIMES           reduce using rule 60 (expression -> parenthesial_expression .)
    DIVIDE          reduce using rule 60 (expression -> parenthesial_expression .)
    PLUS            reduce using rule 60 (expression -> parenthesial_expression .)
    MINUS           reduce using rule 60 (expression -> parenthesial_expression .)
    GT              reduce using rule 60 (expression -> parenthesial_expression .)
    LT              reduce using rule 60 (expression -> parenthesial_expression .)
    LE              reduce using rule 60 (expression -> parenthesial_expression .)
    GE              reduce using rule 60 (expression -> parenthesial_expression .)
    EQ              reduce using rule 60 (expression -> parenthesial_expression .)
    NE              reduce using rule 60 (expression -> parenthesial_expression .)
    OR              reduce using rule 60 (expression -> parenthesial_expression .)
    AND             reduce using rule 60 (expression -> parenthesial_expression .)
    COMMA           reduce using rule 60 (expression -> parenthesial_expression .)
    MODULO          reduce using rule 60 (expression -> parenthesial_expression .)
    INCREMENT       reduce using rule 60 (expression -> parenthesial_expression .)
    DECREMENT       reduce using rule 60 (expression -> parenthesial_expression .)
    EQUALS          reduce using rule 60 (expression -> parenthesial_expression .)
    TIMESEQUAL      reduce using rule 60 (expression -> parenthesial_expression .)
    DIVEQUAL        reduce using rule 60 (expression -> parenthesial_expression .)
    MODEQUAL        reduce using rule 60 (expression -> parenthesial_expression .)
    PLUSEQUAL       reduce using rule 60 (expression -> parenthesial_expression .)
    MINUSEQUAL      reduce using rule 60 (expression -> parenthesial_expression .)
    TERNARY         reduce using rule 60 (expression -> parenthesial_expression .)
    RPAREN          reduce using rule 60 (expression -> parenthesial_expression .)
    RBRACKET        reduce using rule 60 (expression -> parenthesial_expression .)
    COLON           reduce using rule 60 (expression -> parenthesial_expression .)


state 53

    (42) statements -> statement . statements
    (41) statements -> . empty
    (42) statements -> . statement statements
    (136) empty -> .
    (43) statement -> . SEMI
    (44) statement -> . expression SEMI
    (45) statement -> . LBRACE new_scope statements RBRACE
    (46) statement -> . IF LPAREN expression RPAREN statement maybe_else
    (47) statement -> . for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
    (48) statement -> . CONTINUE maybe_id SEMI
    (49) statement -> . BREAK maybe_id SEMI
    (50) statement -> . RETURN maybe_expression SEMI
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (51) for_loop -> . FOR
    (52) for_loop -> . ID COLON FOR
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    RBRACE          reduce using rule 136 (empty -> .)
    SEMI            shift and go to state 50
    LBRACE          shift and go to state 73
    IF              shift and go to state 70
    CONTINUE        shift and go to state 78
    BREAK           shift and go to state 77
    RETURN          shift and go to state 72
    FOR             shift and go to state 62
    ID              shift and go to state 51
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    statements                     shift and go to state 104
    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    statement                      shift and go to state 53
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    right_assignment               shift and go to state 64
    empty                          shift and go to state 58
    function_with_acts             shift and go to state 59
    for_loop                       shift and go to state 61
    ufo                            shift and go to state 63
    type_casting                   shift and go to state 57
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    constant_value                 shift and go to state 81
    identifier                     shift and go to state 82
    expression                     shift and go to state 83
    delete                         shift and go to state 84

state 54

    (71) expression -> new .

    SEMI            reduce using rule 71 (expression -> new .)
    LBRACKET        reduce using rule 71 (expression -> new .)
    TIMES           reduce using rule 71 (expression -> new .)
    DIVIDE          reduce using rule 71 (expression -> new .)
    PLUS            reduce using rule 71 (expression -> new .)
    MINUS           reduce using rule 71 (expression -> new .)
    GT              reduce using rule 71 (expression -> new .)
    LT              reduce using rule 71 (expression -> new .)
    LE              reduce using rule 71 (expression -> new .)
    GE              reduce using rule 71 (expression -> new .)
    EQ              reduce using rule 71 (expression -> new .)
    NE              reduce using rule 71 (expression -> new .)
    OR              reduce using rule 71 (expression -> new .)
    AND             reduce using rule 71 (expression -> new .)
    COMMA           reduce using rule 71 (expression -> new .)
    MODULO          reduce using rule 71 (expression -> new .)
    INCREMENT       reduce using rule 71 (expression -> new .)
    DECREMENT       reduce using rule 71 (expression -> new .)
    EQUALS          reduce using rule 71 (expression -> new .)
    TIMESEQUAL      reduce using rule 71 (expression -> new .)
    DIVEQUAL        reduce using rule 71 (expression -> new .)
    MODEQUAL        reduce using rule 71 (expression -> new .)
    PLUSEQUAL       reduce using rule 71 (expression -> new .)
    MINUSEQUAL      reduce using rule 71 (expression -> new .)
    TERNARY         reduce using rule 71 (expression -> new .)
    RPAREN          reduce using rule 71 (expression -> new .)
    RBRACKET        reduce using rule 71 (expression -> new .)
    COLON           reduce using rule 71 (expression -> new .)


state 55

    (134) constant_value_string -> STRING .

    SEMI            reduce using rule 134 (constant_value_string -> STRING .)
    LBRACKET        reduce using rule 134 (constant_value_string -> STRING .)
    TIMES           reduce using rule 134 (constant_value_string -> STRING .)
    DIVIDE          reduce using rule 134 (constant_value_string -> STRING .)
    PLUS            reduce using rule 134 (constant_value_string -> STRING .)
    MINUS           reduce using rule 134 (constant_value_string -> STRING .)
    GT              reduce using rule 134 (constant_value_string -> STRING .)
    LT              reduce using rule 134 (constant_value_string -> STRING .)
    LE              reduce using rule 134 (constant_value_string -> STRING .)
    GE              reduce using rule 134 (constant_value_string -> STRING .)
    EQ              reduce using rule 134 (constant_value_string -> STRING .)
    NE              reduce using rule 134 (constant_value_string -> STRING .)
    OR              reduce using rule 134 (constant_value_string -> STRING .)
    AND             reduce using rule 134 (constant_value_string -> STRING .)
    COMMA           reduce using rule 134 (constant_value_string -> STRING .)
    MODULO          reduce using rule 134 (constant_value_string -> STRING .)
    INCREMENT       reduce using rule 134 (constant_value_string -> STRING .)
    DECREMENT       reduce using rule 134 (constant_value_string -> STRING .)
    EQUALS          reduce using rule 134 (constant_value_string -> STRING .)
    TIMESEQUAL      reduce using rule 134 (constant_value_string -> STRING .)
    DIVEQUAL        reduce using rule 134 (constant_value_string -> STRING .)
    MODEQUAL        reduce using rule 134 (constant_value_string -> STRING .)
    PLUSEQUAL       reduce using rule 134 (constant_value_string -> STRING .)
    MINUSEQUAL      reduce using rule 134 (constant_value_string -> STRING .)
    TERNARY         reduce using rule 134 (constant_value_string -> STRING .)
    RPAREN          reduce using rule 134 (constant_value_string -> STRING .)
    RBRACKET        reduce using rule 134 (constant_value_string -> STRING .)
    COLON           reduce using rule 134 (constant_value_string -> STRING .)


state 56

    (64) expression -> unary_operation .

    SEMI            reduce using rule 64 (expression -> unary_operation .)
    LBRACKET        reduce using rule 64 (expression -> unary_operation .)
    TIMES           reduce using rule 64 (expression -> unary_operation .)
    DIVIDE          reduce using rule 64 (expression -> unary_operation .)
    PLUS            reduce using rule 64 (expression -> unary_operation .)
    MINUS           reduce using rule 64 (expression -> unary_operation .)
    GT              reduce using rule 64 (expression -> unary_operation .)
    LT              reduce using rule 64 (expression -> unary_operation .)
    LE              reduce using rule 64 (expression -> unary_operation .)
    GE              reduce using rule 64 (expression -> unary_operation .)
    EQ              reduce using rule 64 (expression -> unary_operation .)
    NE              reduce using rule 64 (expression -> unary_operation .)
    OR              reduce using rule 64 (expression -> unary_operation .)
    AND             reduce using rule 64 (expression -> unary_operation .)
    COMMA           reduce using rule 64 (expression -> unary_operation .)
    MODULO          reduce using rule 64 (expression -> unary_operation .)
    INCREMENT       reduce using rule 64 (expression -> unary_operation .)
    DECREMENT       reduce using rule 64 (expression -> unary_operation .)
    EQUALS          reduce using rule 64 (expression -> unary_operation .)
    TIMESEQUAL      reduce using rule 64 (expression -> unary_operation .)
    DIVEQUAL        reduce using rule 64 (expression -> unary_operation .)
    MODEQUAL        reduce using rule 64 (expression -> unary_operation .)
    PLUSEQUAL       reduce using rule 64 (expression -> unary_operation .)
    MINUSEQUAL      reduce using rule 64 (expression -> unary_operation .)
    TERNARY         reduce using rule 64 (expression -> unary_operation .)
    RPAREN          reduce using rule 64 (expression -> unary_operation .)
    RBRACKET        reduce using rule 64 (expression -> unary_operation .)
    COLON           reduce using rule 64 (expression -> unary_operation .)


state 57

    (69) expression -> type_casting .

    SEMI            reduce using rule 69 (expression -> type_casting .)
    LBRACKET        reduce using rule 69 (expression -> type_casting .)
    TIMES           reduce using rule 69 (expression -> type_casting .)
    DIVIDE          reduce using rule 69 (expression -> type_casting .)
    PLUS            reduce using rule 69 (expression -> type_casting .)
    MINUS           reduce using rule 69 (expression -> type_casting .)
    GT              reduce using rule 69 (expression -> type_casting .)
    LT              reduce using rule 69 (expression -> type_casting .)
    LE              reduce using rule 69 (expression -> type_casting .)
    GE              reduce using rule 69 (expression -> type_casting .)
    EQ              reduce using rule 69 (expression -> type_casting .)
    NE              reduce using rule 69 (expression -> type_casting .)
    OR              reduce using rule 69 (expression -> type_casting .)
    AND             reduce using rule 69 (expression -> type_casting .)
    COMMA           reduce using rule 69 (expression -> type_casting .)
    MODULO          reduce using rule 69 (expression -> type_casting .)
    INCREMENT       reduce using rule 69 (expression -> type_casting .)
    DECREMENT       reduce using rule 69 (expression -> type_casting .)
    EQUALS          reduce using rule 69 (expression -> type_casting .)
    TIMESEQUAL      reduce using rule 69 (expression -> type_casting .)
    DIVEQUAL        reduce using rule 69 (expression -> type_casting .)
    MODEQUAL        reduce using rule 69 (expression -> type_casting .)
    PLUSEQUAL       reduce using rule 69 (expression -> type_casting .)
    MINUSEQUAL      reduce using rule 69 (expression -> type_casting .)
    TERNARY         reduce using rule 69 (expression -> type_casting .)
    RPAREN          reduce using rule 69 (expression -> type_casting .)
    RBRACKET        reduce using rule 69 (expression -> type_casting .)
    COLON           reduce using rule 69 (expression -> type_casting .)


state 58

    (41) statements -> empty .

    RBRACE          reduce using rule 41 (statements -> empty .)


state 59

    (85) function_call -> function_with_acts . expression RPAREN
    (87) function_with_acts -> function_with_acts . expression COMMA
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 105
    delete                         shift and go to state 84

state 60

    (94) unary_operation -> PLUS . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 106
    delete                         shift and go to state 84

state 61

    (47) statement -> for_loop . LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement

    LPAREN          shift and go to state 107


state 62

    (51) for_loop -> FOR .

    LPAREN          reduce using rule 51 (for_loop -> FOR .)


state 63

    (63) expression -> ufo .

    SEMI            reduce using rule 63 (expression -> ufo .)
    LBRACKET        reduce using rule 63 (expression -> ufo .)
    TIMES           reduce using rule 63 (expression -> ufo .)
    DIVIDE          reduce using rule 63 (expression -> ufo .)
    PLUS            reduce using rule 63 (expression -> ufo .)
    MINUS           reduce using rule 63 (expression -> ufo .)
    GT              reduce using rule 63 (expression -> ufo .)
    LT              reduce using rule 63 (expression -> ufo .)
    LE              reduce using rule 63 (expression -> ufo .)
    GE              reduce using rule 63 (expression -> ufo .)
    EQ              reduce using rule 63 (expression -> ufo .)
    NE              reduce using rule 63 (expression -> ufo .)
    OR              reduce using rule 63 (expression -> ufo .)
    AND             reduce using rule 63 (expression -> ufo .)
    COMMA           reduce using rule 63 (expression -> ufo .)
    MODULO          reduce using rule 63 (expression -> ufo .)
    INCREMENT       reduce using rule 63 (expression -> ufo .)
    DECREMENT       reduce using rule 63 (expression -> ufo .)
    EQUALS          reduce using rule 63 (expression -> ufo .)
    TIMESEQUAL      reduce using rule 63 (expression -> ufo .)
    DIVEQUAL        reduce using rule 63 (expression -> ufo .)
    MODEQUAL        reduce using rule 63 (expression -> ufo .)
    PLUSEQUAL       reduce using rule 63 (expression -> ufo .)
    MINUSEQUAL      reduce using rule 63 (expression -> ufo .)
    TERNARY         reduce using rule 63 (expression -> ufo .)
    RPAREN          reduce using rule 63 (expression -> ufo .)
    RBRACKET        reduce using rule 63 (expression -> ufo .)
    COLON           reduce using rule 63 (expression -> ufo .)


state 64

    (67) expression -> right_assignment .

    SEMI            reduce using rule 67 (expression -> right_assignment .)
    LBRACKET        reduce using rule 67 (expression -> right_assignment .)
    TIMES           reduce using rule 67 (expression -> right_assignment .)
    DIVIDE          reduce using rule 67 (expression -> right_assignment .)
    PLUS            reduce using rule 67 (expression -> right_assignment .)
    MINUS           reduce using rule 67 (expression -> right_assignment .)
    GT              reduce using rule 67 (expression -> right_assignment .)
    LT              reduce using rule 67 (expression -> right_assignment .)
    LE              reduce using rule 67 (expression -> right_assignment .)
    GE              reduce using rule 67 (expression -> right_assignment .)
    EQ              reduce using rule 67 (expression -> right_assignment .)
    NE              reduce using rule 67 (expression -> right_assignment .)
    OR              reduce using rule 67 (expression -> right_assignment .)
    AND             reduce using rule 67 (expression -> right_assignment .)
    COMMA           reduce using rule 67 (expression -> right_assignment .)
    MODULO          reduce using rule 67 (expression -> right_assignment .)
    INCREMENT       reduce using rule 67 (expression -> right_assignment .)
    DECREMENT       reduce using rule 67 (expression -> right_assignment .)
    EQUALS          reduce using rule 67 (expression -> right_assignment .)
    TIMESEQUAL      reduce using rule 67 (expression -> right_assignment .)
    DIVEQUAL        reduce using rule 67 (expression -> right_assignment .)
    MODEQUAL        reduce using rule 67 (expression -> right_assignment .)
    PLUSEQUAL       reduce using rule 67 (expression -> right_assignment .)
    MINUSEQUAL      reduce using rule 67 (expression -> right_assignment .)
    TERNARY         reduce using rule 67 (expression -> right_assignment .)
    RPAREN          reduce using rule 67 (expression -> right_assignment .)
    RBRACKET        reduce using rule 67 (expression -> right_assignment .)
    COLON           reduce using rule 67 (expression -> right_assignment .)


state 65

    (66) expression -> left_assignment .

    SEMI            reduce using rule 66 (expression -> left_assignment .)
    LBRACKET        reduce using rule 66 (expression -> left_assignment .)
    TIMES           reduce using rule 66 (expression -> left_assignment .)
    DIVIDE          reduce using rule 66 (expression -> left_assignment .)
    PLUS            reduce using rule 66 (expression -> left_assignment .)
    MINUS           reduce using rule 66 (expression -> left_assignment .)
    GT              reduce using rule 66 (expression -> left_assignment .)
    LT              reduce using rule 66 (expression -> left_assignment .)
    LE              reduce using rule 66 (expression -> left_assignment .)
    GE              reduce using rule 66 (expression -> left_assignment .)
    EQ              reduce using rule 66 (expression -> left_assignment .)
    NE              reduce using rule 66 (expression -> left_assignment .)
    OR              reduce using rule 66 (expression -> left_assignment .)
    AND             reduce using rule 66 (expression -> left_assignment .)
    COMMA           reduce using rule 66 (expression -> left_assignment .)
    MODULO          reduce using rule 66 (expression -> left_assignment .)
    INCREMENT       reduce using rule 66 (expression -> left_assignment .)
    DECREMENT       reduce using rule 66 (expression -> left_assignment .)
    EQUALS          reduce using rule 66 (expression -> left_assignment .)
    TIMESEQUAL      reduce using rule 66 (expression -> left_assignment .)
    DIVEQUAL        reduce using rule 66 (expression -> left_assignment .)
    MODEQUAL        reduce using rule 66 (expression -> left_assignment .)
    PLUSEQUAL       reduce using rule 66 (expression -> left_assignment .)
    MINUSEQUAL      reduce using rule 66 (expression -> left_assignment .)
    TERNARY         reduce using rule 66 (expression -> left_assignment .)
    RPAREN          reduce using rule 66 (expression -> left_assignment .)
    RBRACKET        reduce using rule 66 (expression -> left_assignment .)
    COLON           reduce using rule 66 (expression -> left_assignment .)


state 66

    (93) unary_operation -> TIMES . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 108
    delete                         shift and go to state 84

state 67

    (70) expression -> ternary_operation .

    SEMI            reduce using rule 70 (expression -> ternary_operation .)
    LBRACKET        reduce using rule 70 (expression -> ternary_operation .)
    TIMES           reduce using rule 70 (expression -> ternary_operation .)
    DIVIDE          reduce using rule 70 (expression -> ternary_operation .)
    PLUS            reduce using rule 70 (expression -> ternary_operation .)
    MINUS           reduce using rule 70 (expression -> ternary_operation .)
    GT              reduce using rule 70 (expression -> ternary_operation .)
    LT              reduce using rule 70 (expression -> ternary_operation .)
    LE              reduce using rule 70 (expression -> ternary_operation .)
    GE              reduce using rule 70 (expression -> ternary_operation .)
    EQ              reduce using rule 70 (expression -> ternary_operation .)
    NE              reduce using rule 70 (expression -> ternary_operation .)
    OR              reduce using rule 70 (expression -> ternary_operation .)
    AND             reduce using rule 70 (expression -> ternary_operation .)
    COMMA           reduce using rule 70 (expression -> ternary_operation .)
    MODULO          reduce using rule 70 (expression -> ternary_operation .)
    INCREMENT       reduce using rule 70 (expression -> ternary_operation .)
    DECREMENT       reduce using rule 70 (expression -> ternary_operation .)
    EQUALS          reduce using rule 70 (expression -> ternary_operation .)
    TIMESEQUAL      reduce using rule 70 (expression -> ternary_operation .)
    DIVEQUAL        reduce using rule 70 (expression -> ternary_operation .)
    MODEQUAL        reduce using rule 70 (expression -> ternary_operation .)
    PLUSEQUAL       reduce using rule 70 (expression -> ternary_operation .)
    MINUSEQUAL      reduce using rule 70 (expression -> ternary_operation .)
    TERNARY         reduce using rule 70 (expression -> ternary_operation .)
    RPAREN          reduce using rule 70 (expression -> ternary_operation .)
    RBRACKET        reduce using rule 70 (expression -> ternary_operation .)
    COLON           reduce using rule 70 (expression -> ternary_operation .)


state 68

    (82) parenthesial_expression -> LPAREN . expression RPAREN
    (121) type_casting -> LPAREN . type RPAREN expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (18) type -> . basic_type maybe_pointer
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    ufo                            shift and go to state 63
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    type                           shift and go to state 109
    basic_type                     shift and go to state 5
    identifier                     shift and go to state 82
    expression                     shift and go to state 110
    delete                         shift and go to state 84

state 69

    (131) constant_value_int -> INTEGER .

    SEMI            reduce using rule 131 (constant_value_int -> INTEGER .)
    LBRACKET        reduce using rule 131 (constant_value_int -> INTEGER .)
    TIMES           reduce using rule 131 (constant_value_int -> INTEGER .)
    DIVIDE          reduce using rule 131 (constant_value_int -> INTEGER .)
    PLUS            reduce using rule 131 (constant_value_int -> INTEGER .)
    MINUS           reduce using rule 131 (constant_value_int -> INTEGER .)
    GT              reduce using rule 131 (constant_value_int -> INTEGER .)
    LT              reduce using rule 131 (constant_value_int -> INTEGER .)
    LE              reduce using rule 131 (constant_value_int -> INTEGER .)
    GE              reduce using rule 131 (constant_value_int -> INTEGER .)
    EQ              reduce using rule 131 (constant_value_int -> INTEGER .)
    NE              reduce using rule 131 (constant_value_int -> INTEGER .)
    OR              reduce using rule 131 (constant_value_int -> INTEGER .)
    AND             reduce using rule 131 (constant_value_int -> INTEGER .)
    COMMA           reduce using rule 131 (constant_value_int -> INTEGER .)
    MODULO          reduce using rule 131 (constant_value_int -> INTEGER .)
    INCREMENT       reduce using rule 131 (constant_value_int -> INTEGER .)
    DECREMENT       reduce using rule 131 (constant_value_int -> INTEGER .)
    EQUALS          reduce using rule 131 (constant_value_int -> INTEGER .)
    TIMESEQUAL      reduce using rule 131 (constant_value_int -> INTEGER .)
    DIVEQUAL        reduce using rule 131 (constant_value_int -> INTEGER .)
    MODEQUAL        reduce using rule 131 (constant_value_int -> INTEGER .)
    PLUSEQUAL       reduce using rule 131 (constant_value_int -> INTEGER .)
    MINUSEQUAL      reduce using rule 131 (constant_value_int -> INTEGER .)
    TERNARY         reduce using rule 131 (constant_value_int -> INTEGER .)
    RPAREN          reduce using rule 131 (constant_value_int -> INTEGER .)
    RBRACKET        reduce using rule 131 (constant_value_int -> INTEGER .)
    COLON           reduce using rule 131 (constant_value_int -> INTEGER .)


state 70

    (46) statement -> IF . LPAREN expression RPAREN statement maybe_else

    LPAREN          shift and go to state 111


state 71

    (65) expression -> binary_operation .

    SEMI            reduce using rule 65 (expression -> binary_operation .)
    LBRACKET        reduce using rule 65 (expression -> binary_operation .)
    TIMES           reduce using rule 65 (expression -> binary_operation .)
    DIVIDE          reduce using rule 65 (expression -> binary_operation .)
    PLUS            reduce using rule 65 (expression -> binary_operation .)
    MINUS           reduce using rule 65 (expression -> binary_operation .)
    GT              reduce using rule 65 (expression -> binary_operation .)
    LT              reduce using rule 65 (expression -> binary_operation .)
    LE              reduce using rule 65 (expression -> binary_operation .)
    GE              reduce using rule 65 (expression -> binary_operation .)
    EQ              reduce using rule 65 (expression -> binary_operation .)
    NE              reduce using rule 65 (expression -> binary_operation .)
    OR              reduce using rule 65 (expression -> binary_operation .)
    AND             reduce using rule 65 (expression -> binary_operation .)
    COMMA           reduce using rule 65 (expression -> binary_operation .)
    MODULO          reduce using rule 65 (expression -> binary_operation .)
    INCREMENT       reduce using rule 65 (expression -> binary_operation .)
    DECREMENT       reduce using rule 65 (expression -> binary_operation .)
    EQUALS          reduce using rule 65 (expression -> binary_operation .)
    TIMESEQUAL      reduce using rule 65 (expression -> binary_operation .)
    DIVEQUAL        reduce using rule 65 (expression -> binary_operation .)
    MODEQUAL        reduce using rule 65 (expression -> binary_operation .)
    PLUSEQUAL       reduce using rule 65 (expression -> binary_operation .)
    MINUSEQUAL      reduce using rule 65 (expression -> binary_operation .)
    TERNARY         reduce using rule 65 (expression -> binary_operation .)
    RPAREN          reduce using rule 65 (expression -> binary_operation .)
    RBRACKET        reduce using rule 65 (expression -> binary_operation .)
    COLON           reduce using rule 65 (expression -> binary_operation .)


state 72

    (50) statement -> RETURN . maybe_expression SEMI
    (55) maybe_expression -> . empty
    (56) maybe_expression -> . expression
    (136) empty -> .
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    SEMI            reduce using rule 136 (empty -> .)
    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    empty                          shift and go to state 113
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    maybe_expression               shift and go to state 112
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 114
    delete                         shift and go to state 84

state 73

    (45) statement -> LBRACE . new_scope statements RBRACE
    (40) new_scope -> .

    SEMI            reduce using rule 40 (new_scope -> .)
    LBRACE          reduce using rule 40 (new_scope -> .)
    IF              reduce using rule 40 (new_scope -> .)
    CONTINUE        reduce using rule 40 (new_scope -> .)
    BREAK           reduce using rule 40 (new_scope -> .)
    RETURN          reduce using rule 40 (new_scope -> .)
    FOR             reduce using rule 40 (new_scope -> .)
    ID              reduce using rule 40 (new_scope -> .)
    LPAREN          reduce using rule 40 (new_scope -> .)
    TRUE            reduce using rule 40 (new_scope -> .)
    FALSE           reduce using rule 40 (new_scope -> .)
    NULL            reduce using rule 40 (new_scope -> .)
    ADDRESS         reduce using rule 40 (new_scope -> .)
    TIMES           reduce using rule 40 (new_scope -> .)
    PLUS            reduce using rule 40 (new_scope -> .)
    MINUS           reduce using rule 40 (new_scope -> .)
    NOT             reduce using rule 40 (new_scope -> .)
    INCREMENT       reduce using rule 40 (new_scope -> .)
    DECREMENT       reduce using rule 40 (new_scope -> .)
    NEW             reduce using rule 40 (new_scope -> .)
    DELETE          reduce using rule 40 (new_scope -> .)
    INTEGER         reduce using rule 40 (new_scope -> .)
    CHAR            reduce using rule 40 (new_scope -> .)
    DOUBLE          reduce using rule 40 (new_scope -> .)
    STRING          reduce using rule 40 (new_scope -> .)
    RBRACE          reduce using rule 40 (new_scope -> .)

    new_scope                      shift and go to state 115

state 74

    (125) constant_value -> FALSE .

    LBRACKET        reduce using rule 125 (constant_value -> FALSE .)
    TIMES           reduce using rule 125 (constant_value -> FALSE .)
    DIVIDE          reduce using rule 125 (constant_value -> FALSE .)
    PLUS            reduce using rule 125 (constant_value -> FALSE .)
    MINUS           reduce using rule 125 (constant_value -> FALSE .)
    GT              reduce using rule 125 (constant_value -> FALSE .)
    LT              reduce using rule 125 (constant_value -> FALSE .)
    LE              reduce using rule 125 (constant_value -> FALSE .)
    GE              reduce using rule 125 (constant_value -> FALSE .)
    EQ              reduce using rule 125 (constant_value -> FALSE .)
    NE              reduce using rule 125 (constant_value -> FALSE .)
    OR              reduce using rule 125 (constant_value -> FALSE .)
    AND             reduce using rule 125 (constant_value -> FALSE .)
    COMMA           reduce using rule 125 (constant_value -> FALSE .)
    MODULO          reduce using rule 125 (constant_value -> FALSE .)
    INCREMENT       reduce using rule 125 (constant_value -> FALSE .)
    DECREMENT       reduce using rule 125 (constant_value -> FALSE .)
    EQUALS          reduce using rule 125 (constant_value -> FALSE .)
    TIMESEQUAL      reduce using rule 125 (constant_value -> FALSE .)
    DIVEQUAL        reduce using rule 125 (constant_value -> FALSE .)
    MODEQUAL        reduce using rule 125 (constant_value -> FALSE .)
    PLUSEQUAL       reduce using rule 125 (constant_value -> FALSE .)
    MINUSEQUAL      reduce using rule 125 (constant_value -> FALSE .)
    TERNARY         reduce using rule 125 (constant_value -> FALSE .)
    SEMI            reduce using rule 125 (constant_value -> FALSE .)
    RPAREN          reduce using rule 125 (constant_value -> FALSE .)
    RBRACKET        reduce using rule 125 (constant_value -> FALSE .)
    COLON           reduce using rule 125 (constant_value -> FALSE .)


state 75

    (133) constant_value_char -> CHAR .

    LBRACKET        reduce using rule 133 (constant_value_char -> CHAR .)
    TIMES           reduce using rule 133 (constant_value_char -> CHAR .)
    DIVIDE          reduce using rule 133 (constant_value_char -> CHAR .)
    PLUS            reduce using rule 133 (constant_value_char -> CHAR .)
    MINUS           reduce using rule 133 (constant_value_char -> CHAR .)
    GT              reduce using rule 133 (constant_value_char -> CHAR .)
    LT              reduce using rule 133 (constant_value_char -> CHAR .)
    LE              reduce using rule 133 (constant_value_char -> CHAR .)
    GE              reduce using rule 133 (constant_value_char -> CHAR .)
    EQ              reduce using rule 133 (constant_value_char -> CHAR .)
    NE              reduce using rule 133 (constant_value_char -> CHAR .)
    OR              reduce using rule 133 (constant_value_char -> CHAR .)
    AND             reduce using rule 133 (constant_value_char -> CHAR .)
    COMMA           reduce using rule 133 (constant_value_char -> CHAR .)
    MODULO          reduce using rule 133 (constant_value_char -> CHAR .)
    INCREMENT       reduce using rule 133 (constant_value_char -> CHAR .)
    DECREMENT       reduce using rule 133 (constant_value_char -> CHAR .)
    EQUALS          reduce using rule 133 (constant_value_char -> CHAR .)
    TIMESEQUAL      reduce using rule 133 (constant_value_char -> CHAR .)
    DIVEQUAL        reduce using rule 133 (constant_value_char -> CHAR .)
    MODEQUAL        reduce using rule 133 (constant_value_char -> CHAR .)
    PLUSEQUAL       reduce using rule 133 (constant_value_char -> CHAR .)
    MINUSEQUAL      reduce using rule 133 (constant_value_char -> CHAR .)
    TERNARY         reduce using rule 133 (constant_value_char -> CHAR .)
    SEMI            reduce using rule 133 (constant_value_char -> CHAR .)
    RPAREN          reduce using rule 133 (constant_value_char -> CHAR .)
    RBRACKET        reduce using rule 133 (constant_value_char -> CHAR .)
    COLON           reduce using rule 133 (constant_value_char -> CHAR .)


state 76

    (112) left_assignment -> DECREMENT . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 116
    delete                         shift and go to state 84

state 77

    (49) statement -> BREAK . maybe_id SEMI
    (53) maybe_id -> . empty
    (54) maybe_id -> . identifier
    (136) empty -> .
    (25) identifier -> . ID

    SEMI            reduce using rule 136 (empty -> .)
    ID              shift and go to state 119

    identifier                     shift and go to state 118
    maybe_id                       shift and go to state 117
    empty                          shift and go to state 120

state 78

    (48) statement -> CONTINUE . maybe_id SEMI
    (53) maybe_id -> . empty
    (54) maybe_id -> . identifier
    (136) empty -> .
    (25) identifier -> . ID

    SEMI            reduce using rule 136 (empty -> .)
    ID              shift and go to state 119

    identifier                     shift and go to state 118
    maybe_id                       shift and go to state 121
    empty                          shift and go to state 120

state 79

    (92) unary_operation -> ADDRESS . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 122
    delete                         shift and go to state 84

state 80

    (96) unary_operation -> NOT . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 123
    delete                         shift and go to state 84

state 81

    (61) expression -> constant_value .

    SEMI            reduce using rule 61 (expression -> constant_value .)
    LBRACKET        reduce using rule 61 (expression -> constant_value .)
    TIMES           reduce using rule 61 (expression -> constant_value .)
    DIVIDE          reduce using rule 61 (expression -> constant_value .)
    PLUS            reduce using rule 61 (expression -> constant_value .)
    MINUS           reduce using rule 61 (expression -> constant_value .)
    GT              reduce using rule 61 (expression -> constant_value .)
    LT              reduce using rule 61 (expression -> constant_value .)
    LE              reduce using rule 61 (expression -> constant_value .)
    GE              reduce using rule 61 (expression -> constant_value .)
    EQ              reduce using rule 61 (expression -> constant_value .)
    NE              reduce using rule 61 (expression -> constant_value .)
    OR              reduce using rule 61 (expression -> constant_value .)
    AND             reduce using rule 61 (expression -> constant_value .)
    COMMA           reduce using rule 61 (expression -> constant_value .)
    MODULO          reduce using rule 61 (expression -> constant_value .)
    INCREMENT       reduce using rule 61 (expression -> constant_value .)
    DECREMENT       reduce using rule 61 (expression -> constant_value .)
    EQUALS          reduce using rule 61 (expression -> constant_value .)
    TIMESEQUAL      reduce using rule 61 (expression -> constant_value .)
    DIVEQUAL        reduce using rule 61 (expression -> constant_value .)
    MODEQUAL        reduce using rule 61 (expression -> constant_value .)
    PLUSEQUAL       reduce using rule 61 (expression -> constant_value .)
    MINUSEQUAL      reduce using rule 61 (expression -> constant_value .)
    TERNARY         reduce using rule 61 (expression -> constant_value .)
    RPAREN          reduce using rule 61 (expression -> constant_value .)
    RBRACKET        reduce using rule 61 (expression -> constant_value .)
    COLON           reduce using rule 61 (expression -> constant_value .)


state 82

    (59) expression -> identifier .

    SEMI            reduce using rule 59 (expression -> identifier .)
    LBRACKET        reduce using rule 59 (expression -> identifier .)
    TIMES           reduce using rule 59 (expression -> identifier .)
    DIVIDE          reduce using rule 59 (expression -> identifier .)
    PLUS            reduce using rule 59 (expression -> identifier .)
    MINUS           reduce using rule 59 (expression -> identifier .)
    GT              reduce using rule 59 (expression -> identifier .)
    LT              reduce using rule 59 (expression -> identifier .)
    LE              reduce using rule 59 (expression -> identifier .)
    GE              reduce using rule 59 (expression -> identifier .)
    EQ              reduce using rule 59 (expression -> identifier .)
    NE              reduce using rule 59 (expression -> identifier .)
    OR              reduce using rule 59 (expression -> identifier .)
    AND             reduce using rule 59 (expression -> identifier .)
    COMMA           reduce using rule 59 (expression -> identifier .)
    MODULO          reduce using rule 59 (expression -> identifier .)
    INCREMENT       reduce using rule 59 (expression -> identifier .)
    DECREMENT       reduce using rule 59 (expression -> identifier .)
    EQUALS          reduce using rule 59 (expression -> identifier .)
    TIMESEQUAL      reduce using rule 59 (expression -> identifier .)
    DIVEQUAL        reduce using rule 59 (expression -> identifier .)
    MODEQUAL        reduce using rule 59 (expression -> identifier .)
    PLUSEQUAL       reduce using rule 59 (expression -> identifier .)
    MINUSEQUAL      reduce using rule 59 (expression -> identifier .)
    TERNARY         reduce using rule 59 (expression -> identifier .)
    RPAREN          reduce using rule 59 (expression -> identifier .)
    RBRACKET        reduce using rule 59 (expression -> identifier .)
    COLON           reduce using rule 59 (expression -> identifier .)


state 83

    (44) statement -> expression . SEMI
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    SEMI            shift and go to state 129
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 84

    (72) expression -> delete .

    SEMI            reduce using rule 72 (expression -> delete .)
    LBRACKET        reduce using rule 72 (expression -> delete .)
    TIMES           reduce using rule 72 (expression -> delete .)
    DIVIDE          reduce using rule 72 (expression -> delete .)
    PLUS            reduce using rule 72 (expression -> delete .)
    MINUS           reduce using rule 72 (expression -> delete .)
    GT              reduce using rule 72 (expression -> delete .)
    LT              reduce using rule 72 (expression -> delete .)
    LE              reduce using rule 72 (expression -> delete .)
    GE              reduce using rule 72 (expression -> delete .)
    EQ              reduce using rule 72 (expression -> delete .)
    NE              reduce using rule 72 (expression -> delete .)
    OR              reduce using rule 72 (expression -> delete .)
    AND             reduce using rule 72 (expression -> delete .)
    COMMA           reduce using rule 72 (expression -> delete .)
    MODULO          reduce using rule 72 (expression -> delete .)
    INCREMENT       reduce using rule 72 (expression -> delete .)
    DECREMENT       reduce using rule 72 (expression -> delete .)
    EQUALS          reduce using rule 72 (expression -> delete .)
    TIMESEQUAL      reduce using rule 72 (expression -> delete .)
    DIVEQUAL        reduce using rule 72 (expression -> delete .)
    MODEQUAL        reduce using rule 72 (expression -> delete .)
    PLUSEQUAL       reduce using rule 72 (expression -> delete .)
    MINUSEQUAL      reduce using rule 72 (expression -> delete .)
    TERNARY         reduce using rule 72 (expression -> delete .)
    RPAREN          reduce using rule 72 (expression -> delete .)
    RBRACKET        reduce using rule 72 (expression -> delete .)
    COLON           reduce using rule 72 (expression -> delete .)


state 85

    (5) declarations -> declaration declarations .

    SEMI            reduce using rule 5 (declarations -> declaration declarations .)
    LBRACE          reduce using rule 5 (declarations -> declaration declarations .)
    IF              reduce using rule 5 (declarations -> declaration declarations .)
    CONTINUE        reduce using rule 5 (declarations -> declaration declarations .)
    BREAK           reduce using rule 5 (declarations -> declaration declarations .)
    RETURN          reduce using rule 5 (declarations -> declaration declarations .)
    FOR             reduce using rule 5 (declarations -> declaration declarations .)
    ID              reduce using rule 5 (declarations -> declaration declarations .)
    LPAREN          reduce using rule 5 (declarations -> declaration declarations .)
    TRUE            reduce using rule 5 (declarations -> declaration declarations .)
    FALSE           reduce using rule 5 (declarations -> declaration declarations .)
    NULL            reduce using rule 5 (declarations -> declaration declarations .)
    ADDRESS         reduce using rule 5 (declarations -> declaration declarations .)
    TIMES           reduce using rule 5 (declarations -> declaration declarations .)
    PLUS            reduce using rule 5 (declarations -> declaration declarations .)
    MINUS           reduce using rule 5 (declarations -> declaration declarations .)
    NOT             reduce using rule 5 (declarations -> declaration declarations .)
    INCREMENT       reduce using rule 5 (declarations -> declaration declarations .)
    DECREMENT       reduce using rule 5 (declarations -> declaration declarations .)
    NEW             reduce using rule 5 (declarations -> declaration declarations .)
    DELETE          reduce using rule 5 (declarations -> declaration declarations .)
    INTEGER         reduce using rule 5 (declarations -> declaration declarations .)
    CHAR            reduce using rule 5 (declarations -> declaration declarations .)
    DOUBLE          reduce using rule 5 (declarations -> declaration declarations .)
    STRING          reduce using rule 5 (declarations -> declaration declarations .)
    RBRACE          reduce using rule 5 (declarations -> declaration declarations .)


state 86

    (20) maybe_pointer -> TIMES maybe_pointer .

    ID              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    LBRACKET        reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    SEMI            reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    TIMES           reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    DIVIDE          reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    PLUS            reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    MINUS           reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    GT              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    LT              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    LE              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    GE              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    EQ              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    NE              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    OR              reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    AND             reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    COMMA           reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    MODULO          reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    INCREMENT       reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    DECREMENT       reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    EQUALS          reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    TIMESEQUAL      reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    DIVEQUAL        reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    MODEQUAL        reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    PLUSEQUAL       reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    MINUSEQUAL      reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    TERNARY         reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    RPAREN          reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    RBRACKET        reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)
    COLON           reduce using rule 20 (maybe_pointer -> TIMES maybe_pointer .)


state 87

    (17) many_declarators -> declarator COMMA . many_declarators
    (16) many_declarators -> . declarator
    (17) many_declarators -> . declarator COMMA many_declarators
    (27) declarator -> . decl_identifier
    (28) declarator -> . decl_identifier LBRACKET constant_expression RBRACKET
    (26) decl_identifier -> . ID

    ID              shift and go to state 150

    decl_identifier                shift and go to state 32
    many_declarators               shift and go to state 149
    declarator                     shift and go to state 31

state 88

    (28) declarator -> decl_identifier LBRACKET . constant_expression RBRACKET
    (135) constant_expression -> . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    constant_expression            shift and go to state 151
    identifier                     shift and go to state 82
    expression                     shift and go to state 152
    delete                         shift and go to state 84

state 89

    (15) variable_declaration -> type many_declarators SEMI .

    INCLUDE         reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    VOID            reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    INTTYPE         reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    CHARTYPE        reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    BOOLTYPE        reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    DOUBLETYPE      reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    $end            reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    SEMI            reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    LBRACE          reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    IF              reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    CONTINUE        reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    BREAK           reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    RETURN          reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    FOR             reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    ID              reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    LPAREN          reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    TRUE            reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    FALSE           reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    NULL            reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    ADDRESS         reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    TIMES           reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    PLUS            reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    MINUS           reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    NOT             reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    INCREMENT       reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    DECREMENT       reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    NEW             reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    DELETE          reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    INTEGER         reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    CHAR            reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    DOUBLE          reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    STRING          reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)
    RBRACE          reduce using rule 15 (variable_declaration -> type many_declarators SEMI .)


state 90

    (33) maybe_parameter_list -> parameter_list .

    RPAREN          reduce using rule 33 (maybe_parameter_list -> parameter_list .)


state 91

    (36) parameter -> type . decl_identifier
    (26) decl_identifier -> . ID

    ID              shift and go to state 150

    decl_identifier                shift and go to state 153

state 92

    (29) function_declaration -> function_with_result_type LPAREN maybe_parameter_list . RPAREN SEMI
    (39) function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list . RPAREN LBRACE

    RPAREN          shift and go to state 154


state 93

    (37) parameter -> BYREF . type decl_identifier
    (18) type -> . basic_type maybe_pointer
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    basic_type                     shift and go to state 5
    type                           shift and go to state 155

state 94

    (34) parameter_list -> parameter .
    (35) parameter_list -> parameter . COMMA parameter_list

    RPAREN          reduce using rule 34 (parameter_list -> parameter .)
    COMMA           shift and go to state 156


state 95

    (32) maybe_parameter_list -> empty .

    RPAREN          reduce using rule 32 (maybe_parameter_list -> empty .)


state 96

    (25) identifier -> ID .
    (84) function_call -> ID . LPAREN empty RPAREN
    (86) function_with_acts -> ID . LPAREN

    LBRACKET        reduce using rule 25 (identifier -> ID .)
    TIMES           reduce using rule 25 (identifier -> ID .)
    DIVIDE          reduce using rule 25 (identifier -> ID .)
    PLUS            reduce using rule 25 (identifier -> ID .)
    MINUS           reduce using rule 25 (identifier -> ID .)
    GT              reduce using rule 25 (identifier -> ID .)
    LT              reduce using rule 25 (identifier -> ID .)
    LE              reduce using rule 25 (identifier -> ID .)
    GE              reduce using rule 25 (identifier -> ID .)
    EQ              reduce using rule 25 (identifier -> ID .)
    NE              reduce using rule 25 (identifier -> ID .)
    OR              reduce using rule 25 (identifier -> ID .)
    AND             reduce using rule 25 (identifier -> ID .)
    COMMA           reduce using rule 25 (identifier -> ID .)
    MODULO          reduce using rule 25 (identifier -> ID .)
    INCREMENT       reduce using rule 25 (identifier -> ID .)
    DECREMENT       reduce using rule 25 (identifier -> ID .)
    EQUALS          reduce using rule 25 (identifier -> ID .)
    TIMESEQUAL      reduce using rule 25 (identifier -> ID .)
    DIVEQUAL        reduce using rule 25 (identifier -> ID .)
    MODEQUAL        reduce using rule 25 (identifier -> ID .)
    PLUSEQUAL       reduce using rule 25 (identifier -> ID .)
    MINUSEQUAL      reduce using rule 25 (identifier -> ID .)
    TERNARY         reduce using rule 25 (identifier -> ID .)
    SEMI            reduce using rule 25 (identifier -> ID .)
    RPAREN          reduce using rule 25 (identifier -> ID .)
    RBRACKET        reduce using rule 25 (identifier -> ID .)
    COLON           reduce using rule 25 (identifier -> ID .)
    LPAREN          shift and go to state 103


state 97

    (111) left_assignment -> INCREMENT expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    SEMI            reduce using rule 111 (left_assignment -> INCREMENT expression .)
    TIMES           reduce using rule 111 (left_assignment -> INCREMENT expression .)
    DIVIDE          reduce using rule 111 (left_assignment -> INCREMENT expression .)
    PLUS            reduce using rule 111 (left_assignment -> INCREMENT expression .)
    MINUS           reduce using rule 111 (left_assignment -> INCREMENT expression .)
    GT              reduce using rule 111 (left_assignment -> INCREMENT expression .)
    LT              reduce using rule 111 (left_assignment -> INCREMENT expression .)
    LE              reduce using rule 111 (left_assignment -> INCREMENT expression .)
    GE              reduce using rule 111 (left_assignment -> INCREMENT expression .)
    EQ              reduce using rule 111 (left_assignment -> INCREMENT expression .)
    NE              reduce using rule 111 (left_assignment -> INCREMENT expression .)
    OR              reduce using rule 111 (left_assignment -> INCREMENT expression .)
    AND             reduce using rule 111 (left_assignment -> INCREMENT expression .)
    COMMA           reduce using rule 111 (left_assignment -> INCREMENT expression .)
    MODULO          reduce using rule 111 (left_assignment -> INCREMENT expression .)
    EQUALS          reduce using rule 111 (left_assignment -> INCREMENT expression .)
    TIMESEQUAL      reduce using rule 111 (left_assignment -> INCREMENT expression .)
    DIVEQUAL        reduce using rule 111 (left_assignment -> INCREMENT expression .)
    MODEQUAL        reduce using rule 111 (left_assignment -> INCREMENT expression .)
    PLUSEQUAL       reduce using rule 111 (left_assignment -> INCREMENT expression .)
    MINUSEQUAL      reduce using rule 111 (left_assignment -> INCREMENT expression .)
    TERNARY         reduce using rule 111 (left_assignment -> INCREMENT expression .)
    RPAREN          reduce using rule 111 (left_assignment -> INCREMENT expression .)
    RBRACKET        reduce using rule 111 (left_assignment -> INCREMENT expression .)
    COLON           reduce using rule 111 (left_assignment -> INCREMENT expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 111 (left_assignment -> INCREMENT expression .) ]
  ! INCREMENT       [ reduce using rule 111 (left_assignment -> INCREMENT expression .) ]
  ! DECREMENT       [ reduce using rule 111 (left_assignment -> INCREMENT expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 98

    (38) function_definition -> function_with_result_and_parameters declarations statements RBRACE .

    VOID            reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    INTTYPE         reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    CHARTYPE        reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    BOOLTYPE        reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    DOUBLETYPE      reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    SEMI            reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    LBRACE          reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    IF              reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    CONTINUE        reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    BREAK           reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    RETURN          reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    FOR             reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    ID              reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    LPAREN          reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    TRUE            reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    FALSE           reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    NULL            reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    ADDRESS         reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    TIMES           reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    PLUS            reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    MINUS           reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    NOT             reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    INCREMENT       reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    DECREMENT       reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    NEW             reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    DELETE          reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    INTEGER         reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    CHAR            reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    DOUBLE          reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    STRING          reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    RBRACE          reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    INCLUDE         reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)
    $end            reduce using rule 38 (function_definition -> function_with_result_and_parameters declarations statements RBRACE .)


state 99

    (123) delete -> DELETE expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    TIMES           reduce using rule 123 (delete -> DELETE expression .)
    DIVIDE          reduce using rule 123 (delete -> DELETE expression .)
    PLUS            reduce using rule 123 (delete -> DELETE expression .)
    MINUS           reduce using rule 123 (delete -> DELETE expression .)
    GT              reduce using rule 123 (delete -> DELETE expression .)
    LT              reduce using rule 123 (delete -> DELETE expression .)
    LE              reduce using rule 123 (delete -> DELETE expression .)
    GE              reduce using rule 123 (delete -> DELETE expression .)
    EQ              reduce using rule 123 (delete -> DELETE expression .)
    NE              reduce using rule 123 (delete -> DELETE expression .)
    OR              reduce using rule 123 (delete -> DELETE expression .)
    AND             reduce using rule 123 (delete -> DELETE expression .)
    COMMA           reduce using rule 123 (delete -> DELETE expression .)
    MODULO          reduce using rule 123 (delete -> DELETE expression .)
    EQUALS          reduce using rule 123 (delete -> DELETE expression .)
    TIMESEQUAL      reduce using rule 123 (delete -> DELETE expression .)
    DIVEQUAL        reduce using rule 123 (delete -> DELETE expression .)
    MODEQUAL        reduce using rule 123 (delete -> DELETE expression .)
    PLUSEQUAL       reduce using rule 123 (delete -> DELETE expression .)
    MINUSEQUAL      reduce using rule 123 (delete -> DELETE expression .)
    TERNARY         reduce using rule 123 (delete -> DELETE expression .)
    SEMI            reduce using rule 123 (delete -> DELETE expression .)
    RPAREN          reduce using rule 123 (delete -> DELETE expression .)
    RBRACKET        reduce using rule 123 (delete -> DELETE expression .)
    COLON           reduce using rule 123 (delete -> DELETE expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 123 (delete -> DELETE expression .) ]
  ! INCREMENT       [ reduce using rule 123 (delete -> DELETE expression .) ]
  ! DECREMENT       [ reduce using rule 123 (delete -> DELETE expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 100

    (95) unary_operation -> MINUS expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    TIMES           reduce using rule 95 (unary_operation -> MINUS expression .)
    DIVIDE          reduce using rule 95 (unary_operation -> MINUS expression .)
    PLUS            reduce using rule 95 (unary_operation -> MINUS expression .)
    MINUS           reduce using rule 95 (unary_operation -> MINUS expression .)
    GT              reduce using rule 95 (unary_operation -> MINUS expression .)
    LT              reduce using rule 95 (unary_operation -> MINUS expression .)
    LE              reduce using rule 95 (unary_operation -> MINUS expression .)
    GE              reduce using rule 95 (unary_operation -> MINUS expression .)
    EQ              reduce using rule 95 (unary_operation -> MINUS expression .)
    NE              reduce using rule 95 (unary_operation -> MINUS expression .)
    OR              reduce using rule 95 (unary_operation -> MINUS expression .)
    AND             reduce using rule 95 (unary_operation -> MINUS expression .)
    COMMA           reduce using rule 95 (unary_operation -> MINUS expression .)
    MODULO          reduce using rule 95 (unary_operation -> MINUS expression .)
    EQUALS          reduce using rule 95 (unary_operation -> MINUS expression .)
    TIMESEQUAL      reduce using rule 95 (unary_operation -> MINUS expression .)
    DIVEQUAL        reduce using rule 95 (unary_operation -> MINUS expression .)
    MODEQUAL        reduce using rule 95 (unary_operation -> MINUS expression .)
    PLUSEQUAL       reduce using rule 95 (unary_operation -> MINUS expression .)
    MINUSEQUAL      reduce using rule 95 (unary_operation -> MINUS expression .)
    TERNARY         reduce using rule 95 (unary_operation -> MINUS expression .)
    SEMI            reduce using rule 95 (unary_operation -> MINUS expression .)
    RPAREN          reduce using rule 95 (unary_operation -> MINUS expression .)
    RBRACKET        reduce using rule 95 (unary_operation -> MINUS expression .)
    COLON           reduce using rule 95 (unary_operation -> MINUS expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 95 (unary_operation -> MINUS expression .) ]
  ! INCREMENT       [ reduce using rule 95 (unary_operation -> MINUS expression .) ]
  ! DECREMENT       [ reduce using rule 95 (unary_operation -> MINUS expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 101

    (73) new -> NEW type .
    (74) new -> NEW type . LBRACKET expression RBRACKET

    TIMES           reduce using rule 73 (new -> NEW type .)
    DIVIDE          reduce using rule 73 (new -> NEW type .)
    PLUS            reduce using rule 73 (new -> NEW type .)
    MINUS           reduce using rule 73 (new -> NEW type .)
    GT              reduce using rule 73 (new -> NEW type .)
    LT              reduce using rule 73 (new -> NEW type .)
    LE              reduce using rule 73 (new -> NEW type .)
    GE              reduce using rule 73 (new -> NEW type .)
    EQ              reduce using rule 73 (new -> NEW type .)
    NE              reduce using rule 73 (new -> NEW type .)
    OR              reduce using rule 73 (new -> NEW type .)
    AND             reduce using rule 73 (new -> NEW type .)
    COMMA           reduce using rule 73 (new -> NEW type .)
    MODULO          reduce using rule 73 (new -> NEW type .)
    INCREMENT       reduce using rule 73 (new -> NEW type .)
    DECREMENT       reduce using rule 73 (new -> NEW type .)
    EQUALS          reduce using rule 73 (new -> NEW type .)
    TIMESEQUAL      reduce using rule 73 (new -> NEW type .)
    DIVEQUAL        reduce using rule 73 (new -> NEW type .)
    MODEQUAL        reduce using rule 73 (new -> NEW type .)
    PLUSEQUAL       reduce using rule 73 (new -> NEW type .)
    MINUSEQUAL      reduce using rule 73 (new -> NEW type .)
    TERNARY         reduce using rule 73 (new -> NEW type .)
    RBRACKET        reduce using rule 73 (new -> NEW type .)
    SEMI            reduce using rule 73 (new -> NEW type .)
    RPAREN          reduce using rule 73 (new -> NEW type .)
    COLON           reduce using rule 73 (new -> NEW type .)
    LBRACKET        shift and go to state 157

  ! LBRACKET        [ reduce using rule 73 (new -> NEW type .) ]


state 102

    (52) for_loop -> ID COLON . FOR

    FOR             shift and go to state 158


state 103

    (84) function_call -> ID LPAREN . empty RPAREN
    (86) function_with_acts -> ID LPAREN .
    (136) empty -> .

    ID              reduce using rule 86 (function_with_acts -> ID LPAREN .)
    LPAREN          reduce using rule 86 (function_with_acts -> ID LPAREN .)
    TRUE            reduce using rule 86 (function_with_acts -> ID LPAREN .)
    FALSE           reduce using rule 86 (function_with_acts -> ID LPAREN .)
    NULL            reduce using rule 86 (function_with_acts -> ID LPAREN .)
    ADDRESS         reduce using rule 86 (function_with_acts -> ID LPAREN .)
    TIMES           reduce using rule 86 (function_with_acts -> ID LPAREN .)
    PLUS            reduce using rule 86 (function_with_acts -> ID LPAREN .)
    MINUS           reduce using rule 86 (function_with_acts -> ID LPAREN .)
    NOT             reduce using rule 86 (function_with_acts -> ID LPAREN .)
    INCREMENT       reduce using rule 86 (function_with_acts -> ID LPAREN .)
    DECREMENT       reduce using rule 86 (function_with_acts -> ID LPAREN .)
    NEW             reduce using rule 86 (function_with_acts -> ID LPAREN .)
    DELETE          reduce using rule 86 (function_with_acts -> ID LPAREN .)
    INTEGER         reduce using rule 86 (function_with_acts -> ID LPAREN .)
    CHAR            reduce using rule 86 (function_with_acts -> ID LPAREN .)
    DOUBLE          reduce using rule 86 (function_with_acts -> ID LPAREN .)
    STRING          reduce using rule 86 (function_with_acts -> ID LPAREN .)
    RPAREN          reduce using rule 136 (empty -> .)

    empty                          shift and go to state 159

state 104

    (42) statements -> statement statements .

    RBRACE          reduce using rule 42 (statements -> statement statements .)


state 105

    (85) function_call -> function_with_acts expression . RPAREN
    (87) function_with_acts -> function_with_acts expression . COMMA
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RPAREN          shift and go to state 160
    COMMA           shift and go to state 161
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 106

    (94) unary_operation -> PLUS expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    TIMES           reduce using rule 94 (unary_operation -> PLUS expression .)
    DIVIDE          reduce using rule 94 (unary_operation -> PLUS expression .)
    PLUS            reduce using rule 94 (unary_operation -> PLUS expression .)
    MINUS           reduce using rule 94 (unary_operation -> PLUS expression .)
    GT              reduce using rule 94 (unary_operation -> PLUS expression .)
    LT              reduce using rule 94 (unary_operation -> PLUS expression .)
    LE              reduce using rule 94 (unary_operation -> PLUS expression .)
    GE              reduce using rule 94 (unary_operation -> PLUS expression .)
    EQ              reduce using rule 94 (unary_operation -> PLUS expression .)
    NE              reduce using rule 94 (unary_operation -> PLUS expression .)
    OR              reduce using rule 94 (unary_operation -> PLUS expression .)
    AND             reduce using rule 94 (unary_operation -> PLUS expression .)
    COMMA           reduce using rule 94 (unary_operation -> PLUS expression .)
    MODULO          reduce using rule 94 (unary_operation -> PLUS expression .)
    EQUALS          reduce using rule 94 (unary_operation -> PLUS expression .)
    TIMESEQUAL      reduce using rule 94 (unary_operation -> PLUS expression .)
    DIVEQUAL        reduce using rule 94 (unary_operation -> PLUS expression .)
    MODEQUAL        reduce using rule 94 (unary_operation -> PLUS expression .)
    PLUSEQUAL       reduce using rule 94 (unary_operation -> PLUS expression .)
    MINUSEQUAL      reduce using rule 94 (unary_operation -> PLUS expression .)
    TERNARY         reduce using rule 94 (unary_operation -> PLUS expression .)
    SEMI            reduce using rule 94 (unary_operation -> PLUS expression .)
    RPAREN          reduce using rule 94 (unary_operation -> PLUS expression .)
    RBRACKET        reduce using rule 94 (unary_operation -> PLUS expression .)
    COLON           reduce using rule 94 (unary_operation -> PLUS expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 94 (unary_operation -> PLUS expression .) ]
  ! INCREMENT       [ reduce using rule 94 (unary_operation -> PLUS expression .) ]
  ! DECREMENT       [ reduce using rule 94 (unary_operation -> PLUS expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 107

    (47) statement -> for_loop LPAREN . maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
    (55) maybe_expression -> . empty
    (56) maybe_expression -> . expression
    (136) empty -> .
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    SEMI            reduce using rule 136 (empty -> .)
    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    empty                          shift and go to state 113
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    maybe_expression               shift and go to state 162
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 114
    delete                         shift and go to state 84

state 108

    (93) unary_operation -> TIMES expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    TIMES           reduce using rule 93 (unary_operation -> TIMES expression .)
    DIVIDE          reduce using rule 93 (unary_operation -> TIMES expression .)
    PLUS            reduce using rule 93 (unary_operation -> TIMES expression .)
    MINUS           reduce using rule 93 (unary_operation -> TIMES expression .)
    GT              reduce using rule 93 (unary_operation -> TIMES expression .)
    LT              reduce using rule 93 (unary_operation -> TIMES expression .)
    LE              reduce using rule 93 (unary_operation -> TIMES expression .)
    GE              reduce using rule 93 (unary_operation -> TIMES expression .)
    EQ              reduce using rule 93 (unary_operation -> TIMES expression .)
    NE              reduce using rule 93 (unary_operation -> TIMES expression .)
    OR              reduce using rule 93 (unary_operation -> TIMES expression .)
    AND             reduce using rule 93 (unary_operation -> TIMES expression .)
    COMMA           reduce using rule 93 (unary_operation -> TIMES expression .)
    MODULO          reduce using rule 93 (unary_operation -> TIMES expression .)
    EQUALS          reduce using rule 93 (unary_operation -> TIMES expression .)
    TIMESEQUAL      reduce using rule 93 (unary_operation -> TIMES expression .)
    DIVEQUAL        reduce using rule 93 (unary_operation -> TIMES expression .)
    MODEQUAL        reduce using rule 93 (unary_operation -> TIMES expression .)
    PLUSEQUAL       reduce using rule 93 (unary_operation -> TIMES expression .)
    MINUSEQUAL      reduce using rule 93 (unary_operation -> TIMES expression .)
    TERNARY         reduce using rule 93 (unary_operation -> TIMES expression .)
    SEMI            reduce using rule 93 (unary_operation -> TIMES expression .)
    RPAREN          reduce using rule 93 (unary_operation -> TIMES expression .)
    RBRACKET        reduce using rule 93 (unary_operation -> TIMES expression .)
    COLON           reduce using rule 93 (unary_operation -> TIMES expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 93 (unary_operation -> TIMES expression .) ]
  ! INCREMENT       [ reduce using rule 93 (unary_operation -> TIMES expression .) ]
  ! DECREMENT       [ reduce using rule 93 (unary_operation -> TIMES expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 109

    (121) type_casting -> LPAREN type . RPAREN expression

    RPAREN          shift and go to state 163


state 110

    (82) parenthesial_expression -> LPAREN expression . RPAREN
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RPAREN          shift and go to state 164
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 111

    (46) statement -> IF LPAREN . expression RPAREN statement maybe_else
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 165
    delete                         shift and go to state 84

state 112

    (50) statement -> RETURN maybe_expression . SEMI

    SEMI            shift and go to state 166


state 113

    (55) maybe_expression -> empty .

    SEMI            reduce using rule 55 (maybe_expression -> empty .)
    RPAREN          reduce using rule 55 (maybe_expression -> empty .)


state 114

    (56) maybe_expression -> expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    SEMI            reduce using rule 56 (maybe_expression -> expression .)
    RPAREN          reduce using rule 56 (maybe_expression -> expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 115

    (45) statement -> LBRACE new_scope . statements RBRACE
    (41) statements -> . empty
    (42) statements -> . statement statements
    (136) empty -> .
    (43) statement -> . SEMI
    (44) statement -> . expression SEMI
    (45) statement -> . LBRACE new_scope statements RBRACE
    (46) statement -> . IF LPAREN expression RPAREN statement maybe_else
    (47) statement -> . for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
    (48) statement -> . CONTINUE maybe_id SEMI
    (49) statement -> . BREAK maybe_id SEMI
    (50) statement -> . RETURN maybe_expression SEMI
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (51) for_loop -> . FOR
    (52) for_loop -> . ID COLON FOR
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    RBRACE          reduce using rule 136 (empty -> .)
    SEMI            shift and go to state 50
    LBRACE          shift and go to state 73
    IF              shift and go to state 70
    CONTINUE        shift and go to state 78
    BREAK           shift and go to state 77
    RETURN          shift and go to state 72
    FOR             shift and go to state 62
    ID              shift and go to state 51
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    statements                     shift and go to state 167
    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    statement                      shift and go to state 53
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    right_assignment               shift and go to state 64
    empty                          shift and go to state 58
    function_with_acts             shift and go to state 59
    for_loop                       shift and go to state 61
    ufo                            shift and go to state 63
    type_casting                   shift and go to state 57
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    constant_value                 shift and go to state 81
    identifier                     shift and go to state 82
    expression                     shift and go to state 83
    delete                         shift and go to state 84

state 116

    (112) left_assignment -> DECREMENT expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    SEMI            reduce using rule 112 (left_assignment -> DECREMENT expression .)
    TIMES           reduce using rule 112 (left_assignment -> DECREMENT expression .)
    DIVIDE          reduce using rule 112 (left_assignment -> DECREMENT expression .)
    PLUS            reduce using rule 112 (left_assignment -> DECREMENT expression .)
    MINUS           reduce using rule 112 (left_assignment -> DECREMENT expression .)
    GT              reduce using rule 112 (left_assignment -> DECREMENT expression .)
    LT              reduce using rule 112 (left_assignment -> DECREMENT expression .)
    LE              reduce using rule 112 (left_assignment -> DECREMENT expression .)
    GE              reduce using rule 112 (left_assignment -> DECREMENT expression .)
    EQ              reduce using rule 112 (left_assignment -> DECREMENT expression .)
    NE              reduce using rule 112 (left_assignment -> DECREMENT expression .)
    OR              reduce using rule 112 (left_assignment -> DECREMENT expression .)
    AND             reduce using rule 112 (left_assignment -> DECREMENT expression .)
    COMMA           reduce using rule 112 (left_assignment -> DECREMENT expression .)
    MODULO          reduce using rule 112 (left_assignment -> DECREMENT expression .)
    EQUALS          reduce using rule 112 (left_assignment -> DECREMENT expression .)
    TIMESEQUAL      reduce using rule 112 (left_assignment -> DECREMENT expression .)
    DIVEQUAL        reduce using rule 112 (left_assignment -> DECREMENT expression .)
    MODEQUAL        reduce using rule 112 (left_assignment -> DECREMENT expression .)
    PLUSEQUAL       reduce using rule 112 (left_assignment -> DECREMENT expression .)
    MINUSEQUAL      reduce using rule 112 (left_assignment -> DECREMENT expression .)
    TERNARY         reduce using rule 112 (left_assignment -> DECREMENT expression .)
    RPAREN          reduce using rule 112 (left_assignment -> DECREMENT expression .)
    RBRACKET        reduce using rule 112 (left_assignment -> DECREMENT expression .)
    COLON           reduce using rule 112 (left_assignment -> DECREMENT expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 112 (left_assignment -> DECREMENT expression .) ]
  ! INCREMENT       [ reduce using rule 112 (left_assignment -> DECREMENT expression .) ]
  ! DECREMENT       [ reduce using rule 112 (left_assignment -> DECREMENT expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 117

    (49) statement -> BREAK maybe_id . SEMI

    SEMI            shift and go to state 168


state 118

    (54) maybe_id -> identifier .

    SEMI            reduce using rule 54 (maybe_id -> identifier .)


state 119

    (25) identifier -> ID .

    SEMI            reduce using rule 25 (identifier -> ID .)


state 120

    (53) maybe_id -> empty .

    SEMI            reduce using rule 53 (maybe_id -> empty .)


state 121

    (48) statement -> CONTINUE maybe_id . SEMI

    SEMI            shift and go to state 169


state 122

    (92) unary_operation -> ADDRESS expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    TIMES           reduce using rule 92 (unary_operation -> ADDRESS expression .)
    DIVIDE          reduce using rule 92 (unary_operation -> ADDRESS expression .)
    PLUS            reduce using rule 92 (unary_operation -> ADDRESS expression .)
    MINUS           reduce using rule 92 (unary_operation -> ADDRESS expression .)
    GT              reduce using rule 92 (unary_operation -> ADDRESS expression .)
    LT              reduce using rule 92 (unary_operation -> ADDRESS expression .)
    LE              reduce using rule 92 (unary_operation -> ADDRESS expression .)
    GE              reduce using rule 92 (unary_operation -> ADDRESS expression .)
    EQ              reduce using rule 92 (unary_operation -> ADDRESS expression .)
    NE              reduce using rule 92 (unary_operation -> ADDRESS expression .)
    OR              reduce using rule 92 (unary_operation -> ADDRESS expression .)
    AND             reduce using rule 92 (unary_operation -> ADDRESS expression .)
    COMMA           reduce using rule 92 (unary_operation -> ADDRESS expression .)
    MODULO          reduce using rule 92 (unary_operation -> ADDRESS expression .)
    EQUALS          reduce using rule 92 (unary_operation -> ADDRESS expression .)
    TIMESEQUAL      reduce using rule 92 (unary_operation -> ADDRESS expression .)
    DIVEQUAL        reduce using rule 92 (unary_operation -> ADDRESS expression .)
    MODEQUAL        reduce using rule 92 (unary_operation -> ADDRESS expression .)
    PLUSEQUAL       reduce using rule 92 (unary_operation -> ADDRESS expression .)
    MINUSEQUAL      reduce using rule 92 (unary_operation -> ADDRESS expression .)
    TERNARY         reduce using rule 92 (unary_operation -> ADDRESS expression .)
    SEMI            reduce using rule 92 (unary_operation -> ADDRESS expression .)
    RPAREN          reduce using rule 92 (unary_operation -> ADDRESS expression .)
    RBRACKET        reduce using rule 92 (unary_operation -> ADDRESS expression .)
    COLON           reduce using rule 92 (unary_operation -> ADDRESS expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 92 (unary_operation -> ADDRESS expression .) ]
  ! INCREMENT       [ reduce using rule 92 (unary_operation -> ADDRESS expression .) ]
  ! DECREMENT       [ reduce using rule 92 (unary_operation -> ADDRESS expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 123

    (96) unary_operation -> NOT expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    TIMES           reduce using rule 96 (unary_operation -> NOT expression .)
    DIVIDE          reduce using rule 96 (unary_operation -> NOT expression .)
    PLUS            reduce using rule 96 (unary_operation -> NOT expression .)
    MINUS           reduce using rule 96 (unary_operation -> NOT expression .)
    GT              reduce using rule 96 (unary_operation -> NOT expression .)
    LT              reduce using rule 96 (unary_operation -> NOT expression .)
    LE              reduce using rule 96 (unary_operation -> NOT expression .)
    GE              reduce using rule 96 (unary_operation -> NOT expression .)
    EQ              reduce using rule 96 (unary_operation -> NOT expression .)
    NE              reduce using rule 96 (unary_operation -> NOT expression .)
    OR              reduce using rule 96 (unary_operation -> NOT expression .)
    AND             reduce using rule 96 (unary_operation -> NOT expression .)
    COMMA           reduce using rule 96 (unary_operation -> NOT expression .)
    MODULO          reduce using rule 96 (unary_operation -> NOT expression .)
    EQUALS          reduce using rule 96 (unary_operation -> NOT expression .)
    TIMESEQUAL      reduce using rule 96 (unary_operation -> NOT expression .)
    DIVEQUAL        reduce using rule 96 (unary_operation -> NOT expression .)
    MODEQUAL        reduce using rule 96 (unary_operation -> NOT expression .)
    PLUSEQUAL       reduce using rule 96 (unary_operation -> NOT expression .)
    MINUSEQUAL      reduce using rule 96 (unary_operation -> NOT expression .)
    TERNARY         reduce using rule 96 (unary_operation -> NOT expression .)
    SEMI            reduce using rule 96 (unary_operation -> NOT expression .)
    RPAREN          reduce using rule 96 (unary_operation -> NOT expression .)
    RBRACKET        reduce using rule 96 (unary_operation -> NOT expression .)
    COLON           reduce using rule 96 (unary_operation -> NOT expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 96 (unary_operation -> NOT expression .) ]
  ! INCREMENT       [ reduce using rule 96 (unary_operation -> NOT expression .) ]
  ! DECREMENT       [ reduce using rule 96 (unary_operation -> NOT expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 124

    (117) whole_assignment -> expression DIVEQUAL . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 170
    delete                         shift and go to state 84

state 125

    (83) ufo -> expression LBRACKET . expression RBRACKET
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 171
    delete                         shift and go to state 84

state 126

    (122) ternary_operation -> expression TERNARY . expression COLON expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 172
    delete                         shift and go to state 84

state 127

    (100) binary_operation -> expression MINUS . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 173
    delete                         shift and go to state 84

state 128

    (103) binary_operation -> expression LE . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 174
    delete                         shift and go to state 84

state 129

    (44) statement -> expression SEMI .

    SEMI            reduce using rule 44 (statement -> expression SEMI .)
    LBRACE          reduce using rule 44 (statement -> expression SEMI .)
    IF              reduce using rule 44 (statement -> expression SEMI .)
    CONTINUE        reduce using rule 44 (statement -> expression SEMI .)
    BREAK           reduce using rule 44 (statement -> expression SEMI .)
    RETURN          reduce using rule 44 (statement -> expression SEMI .)
    FOR             reduce using rule 44 (statement -> expression SEMI .)
    ID              reduce using rule 44 (statement -> expression SEMI .)
    LPAREN          reduce using rule 44 (statement -> expression SEMI .)
    TRUE            reduce using rule 44 (statement -> expression SEMI .)
    FALSE           reduce using rule 44 (statement -> expression SEMI .)
    NULL            reduce using rule 44 (statement -> expression SEMI .)
    ADDRESS         reduce using rule 44 (statement -> expression SEMI .)
    TIMES           reduce using rule 44 (statement -> expression SEMI .)
    PLUS            reduce using rule 44 (statement -> expression SEMI .)
    MINUS           reduce using rule 44 (statement -> expression SEMI .)
    NOT             reduce using rule 44 (statement -> expression SEMI .)
    INCREMENT       reduce using rule 44 (statement -> expression SEMI .)
    DECREMENT       reduce using rule 44 (statement -> expression SEMI .)
    NEW             reduce using rule 44 (statement -> expression SEMI .)
    DELETE          reduce using rule 44 (statement -> expression SEMI .)
    INTEGER         reduce using rule 44 (statement -> expression SEMI .)
    CHAR            reduce using rule 44 (statement -> expression SEMI .)
    DOUBLE          reduce using rule 44 (statement -> expression SEMI .)
    STRING          reduce using rule 44 (statement -> expression SEMI .)
    RBRACE          reduce using rule 44 (statement -> expression SEMI .)
    ELSE            reduce using rule 44 (statement -> expression SEMI .)


state 130

    (118) whole_assignment -> expression MODEQUAL . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 175
    delete                         shift and go to state 84

state 131

    (106) binary_operation -> expression NE . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 176
    delete                         shift and go to state 84

state 132

    (102) binary_operation -> expression LT . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 177
    delete                         shift and go to state 84

state 133

    (99) binary_operation -> expression PLUS . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 178
    delete                         shift and go to state 84

state 134

    (113) right_assignment -> expression INCREMENT .

    RBRACKET        reduce using rule 113 (right_assignment -> expression INCREMENT .)
    LBRACKET        reduce using rule 113 (right_assignment -> expression INCREMENT .)
    TIMES           reduce using rule 113 (right_assignment -> expression INCREMENT .)
    DIVIDE          reduce using rule 113 (right_assignment -> expression INCREMENT .)
    PLUS            reduce using rule 113 (right_assignment -> expression INCREMENT .)
    MINUS           reduce using rule 113 (right_assignment -> expression INCREMENT .)
    GT              reduce using rule 113 (right_assignment -> expression INCREMENT .)
    LT              reduce using rule 113 (right_assignment -> expression INCREMENT .)
    LE              reduce using rule 113 (right_assignment -> expression INCREMENT .)
    GE              reduce using rule 113 (right_assignment -> expression INCREMENT .)
    EQ              reduce using rule 113 (right_assignment -> expression INCREMENT .)
    NE              reduce using rule 113 (right_assignment -> expression INCREMENT .)
    OR              reduce using rule 113 (right_assignment -> expression INCREMENT .)
    AND             reduce using rule 113 (right_assignment -> expression INCREMENT .)
    COMMA           reduce using rule 113 (right_assignment -> expression INCREMENT .)
    MODULO          reduce using rule 113 (right_assignment -> expression INCREMENT .)
    INCREMENT       reduce using rule 113 (right_assignment -> expression INCREMENT .)
    DECREMENT       reduce using rule 113 (right_assignment -> expression INCREMENT .)
    EQUALS          reduce using rule 113 (right_assignment -> expression INCREMENT .)
    TIMESEQUAL      reduce using rule 113 (right_assignment -> expression INCREMENT .)
    DIVEQUAL        reduce using rule 113 (right_assignment -> expression INCREMENT .)
    MODEQUAL        reduce using rule 113 (right_assignment -> expression INCREMENT .)
    PLUSEQUAL       reduce using rule 113 (right_assignment -> expression INCREMENT .)
    MINUSEQUAL      reduce using rule 113 (right_assignment -> expression INCREMENT .)
    TERNARY         reduce using rule 113 (right_assignment -> expression INCREMENT .)
    SEMI            reduce using rule 113 (right_assignment -> expression INCREMENT .)
    RPAREN          reduce using rule 113 (right_assignment -> expression INCREMENT .)
    COLON           reduce using rule 113 (right_assignment -> expression INCREMENT .)


state 135

    (109) binary_operation -> expression COMMA . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 179
    delete                         shift and go to state 84

state 136

    (101) binary_operation -> expression GT . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 180
    delete                         shift and go to state 84

state 137

    (110) binary_operation -> expression MODULO . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 181
    delete                         shift and go to state 84

state 138

    (98) binary_operation -> expression DIVIDE . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 182
    delete                         shift and go to state 84

state 139

    (115) whole_assignment -> expression EQUALS . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 183
    delete                         shift and go to state 84

state 140

    (97) binary_operation -> expression TIMES . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 184
    delete                         shift and go to state 84

state 141

    (119) whole_assignment -> expression PLUSEQUAL . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 185
    delete                         shift and go to state 84

state 142

    (104) binary_operation -> expression GE . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 186
    delete                         shift and go to state 84

state 143

    (105) binary_operation -> expression EQ . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 187
    delete                         shift and go to state 84

state 144

    (108) binary_operation -> expression AND . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 188
    delete                         shift and go to state 84

state 145

    (120) whole_assignment -> expression MINUSEQUAL . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 189
    delete                         shift and go to state 84

state 146

    (114) right_assignment -> expression DECREMENT .

    RBRACKET        reduce using rule 114 (right_assignment -> expression DECREMENT .)
    LBRACKET        reduce using rule 114 (right_assignment -> expression DECREMENT .)
    TIMES           reduce using rule 114 (right_assignment -> expression DECREMENT .)
    DIVIDE          reduce using rule 114 (right_assignment -> expression DECREMENT .)
    PLUS            reduce using rule 114 (right_assignment -> expression DECREMENT .)
    MINUS           reduce using rule 114 (right_assignment -> expression DECREMENT .)
    GT              reduce using rule 114 (right_assignment -> expression DECREMENT .)
    LT              reduce using rule 114 (right_assignment -> expression DECREMENT .)
    LE              reduce using rule 114 (right_assignment -> expression DECREMENT .)
    GE              reduce using rule 114 (right_assignment -> expression DECREMENT .)
    EQ              reduce using rule 114 (right_assignment -> expression DECREMENT .)
    NE              reduce using rule 114 (right_assignment -> expression DECREMENT .)
    OR              reduce using rule 114 (right_assignment -> expression DECREMENT .)
    AND             reduce using rule 114 (right_assignment -> expression DECREMENT .)
    COMMA           reduce using rule 114 (right_assignment -> expression DECREMENT .)
    MODULO          reduce using rule 114 (right_assignment -> expression DECREMENT .)
    INCREMENT       reduce using rule 114 (right_assignment -> expression DECREMENT .)
    DECREMENT       reduce using rule 114 (right_assignment -> expression DECREMENT .)
    EQUALS          reduce using rule 114 (right_assignment -> expression DECREMENT .)
    TIMESEQUAL      reduce using rule 114 (right_assignment -> expression DECREMENT .)
    DIVEQUAL        reduce using rule 114 (right_assignment -> expression DECREMENT .)
    MODEQUAL        reduce using rule 114 (right_assignment -> expression DECREMENT .)
    PLUSEQUAL       reduce using rule 114 (right_assignment -> expression DECREMENT .)
    MINUSEQUAL      reduce using rule 114 (right_assignment -> expression DECREMENT .)
    TERNARY         reduce using rule 114 (right_assignment -> expression DECREMENT .)
    SEMI            reduce using rule 114 (right_assignment -> expression DECREMENT .)
    RPAREN          reduce using rule 114 (right_assignment -> expression DECREMENT .)
    COLON           reduce using rule 114 (right_assignment -> expression DECREMENT .)


state 147

    (116) whole_assignment -> expression TIMESEQUAL . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 190
    delete                         shift and go to state 84

state 148

    (107) binary_operation -> expression OR . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 191
    delete                         shift and go to state 84

state 149

    (17) many_declarators -> declarator COMMA many_declarators .

    SEMI            reduce using rule 17 (many_declarators -> declarator COMMA many_declarators .)


state 150

    (26) decl_identifier -> ID .

    COMMA           reduce using rule 26 (decl_identifier -> ID .)
    RPAREN          reduce using rule 26 (decl_identifier -> ID .)
    LBRACKET        reduce using rule 26 (decl_identifier -> ID .)
    SEMI            reduce using rule 26 (decl_identifier -> ID .)


state 151

    (28) declarator -> decl_identifier LBRACKET constant_expression . RBRACKET

    RBRACKET        shift and go to state 192


state 152

    (135) constant_expression -> expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 135 (constant_expression -> expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 153

    (36) parameter -> type decl_identifier .

    COMMA           reduce using rule 36 (parameter -> type decl_identifier .)
    RPAREN          reduce using rule 36 (parameter -> type decl_identifier .)


state 154

    (29) function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN . SEMI
    (39) function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN . LBRACE

    SEMI            shift and go to state 194
    LBRACE          shift and go to state 193


state 155

    (37) parameter -> BYREF type . decl_identifier
    (26) decl_identifier -> . ID

    ID              shift and go to state 150

    decl_identifier                shift and go to state 195

state 156

    (35) parameter_list -> parameter COMMA . parameter_list
    (34) parameter_list -> . parameter
    (35) parameter_list -> . parameter COMMA parameter_list
    (36) parameter -> . type decl_identifier
    (37) parameter -> . BYREF type decl_identifier
    (18) type -> . basic_type maybe_pointer
    (21) basic_type -> . INTTYPE
    (22) basic_type -> . CHARTYPE
    (23) basic_type -> . BOOLTYPE
    (24) basic_type -> . DOUBLETYPE

    BYREF           shift and go to state 93
    INTTYPE         shift and go to state 15
    CHARTYPE        shift and go to state 7
    BOOLTYPE        shift and go to state 11
    DOUBLETYPE      shift and go to state 18

    parameter_list                 shift and go to state 196
    parameter                      shift and go to state 94
    basic_type                     shift and go to state 5
    type                           shift and go to state 91

state 157

    (74) new -> NEW type LBRACKET . expression RBRACKET
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 197
    delete                         shift and go to state 84

state 158

    (52) for_loop -> ID COLON FOR .

    LPAREN          reduce using rule 52 (for_loop -> ID COLON FOR .)


state 159

    (84) function_call -> ID LPAREN empty . RPAREN

    RPAREN          shift and go to state 198


state 160

    (85) function_call -> function_with_acts expression RPAREN .

    RPAREN          reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    COMMA           reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    LBRACKET        reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    TIMES           reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    DIVIDE          reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    PLUS            reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    MINUS           reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    GT              reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    LT              reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    LE              reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    GE              reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    EQ              reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    NE              reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    OR              reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    AND             reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    MODULO          reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    INCREMENT       reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    DECREMENT       reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    EQUALS          reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    TIMESEQUAL      reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    DIVEQUAL        reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    MODEQUAL        reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    PLUSEQUAL       reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    MINUSEQUAL      reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    TERNARY         reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    SEMI            reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    RBRACKET        reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)
    COLON           reduce using rule 85 (function_call -> function_with_acts expression RPAREN .)


state 161

    (87) function_with_acts -> function_with_acts expression COMMA .
    (109) binary_operation -> expression COMMA . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    TRUE            reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    FALSE           reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    NULL            reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    ADDRESS         reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    INTEGER         reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    CHAR            reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    DOUBLE          reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    STRING          reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .)
    LPAREN          shift and go to state 68
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40

  ! LPAREN          [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! TIMES           [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! PLUS            [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! MINUS           [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! NOT             [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! INCREMENT       [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! DECREMENT       [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! NEW             [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! DELETE          [ reduce using rule 87 (function_with_acts -> function_with_acts expression COMMA .) ]
  ! ID              [ shift and go to state 96 ]
  ! TRUE            [ shift and go to state 46 ]
  ! FALSE           [ shift and go to state 74 ]
  ! NULL            [ shift and go to state 45 ]
  ! ADDRESS         [ shift and go to state 79 ]
  ! INTEGER         [ shift and go to state 69 ]
  ! CHAR            [ shift and go to state 75 ]
  ! DOUBLE          [ shift and go to state 48 ]
  ! STRING          [ shift and go to state 55 ]

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 179
    delete                         shift and go to state 84

state 162

    (47) statement -> for_loop LPAREN maybe_expression . SEMI maybe_expression SEMI maybe_expression RPAREN statement

    SEMI            shift and go to state 199


state 163

    (121) type_casting -> LPAREN type RPAREN . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 200
    delete                         shift and go to state 84

state 164

    (82) parenthesial_expression -> LPAREN expression RPAREN .

    LBRACKET        reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    NE              reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    MODULO          reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    INCREMENT       reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    DECREMENT       reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    TIMESEQUAL      reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    DIVEQUAL        reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    MODEQUAL        reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    PLUSEQUAL       reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    MINUSEQUAL      reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    TERNARY         reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)
    COLON           reduce using rule 82 (parenthesial_expression -> LPAREN expression RPAREN .)


state 165

    (46) statement -> IF LPAREN expression . RPAREN statement maybe_else
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RPAREN          shift and go to state 201
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 166

    (50) statement -> RETURN maybe_expression SEMI .

    SEMI            reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    LBRACE          reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    IF              reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    CONTINUE        reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    BREAK           reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    RETURN          reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    FOR             reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    ID              reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    LPAREN          reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    TRUE            reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    FALSE           reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    NULL            reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    ADDRESS         reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    TIMES           reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    PLUS            reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    MINUS           reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    NOT             reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    INCREMENT       reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    DECREMENT       reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    NEW             reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    DELETE          reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    INTEGER         reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    CHAR            reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    DOUBLE          reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    STRING          reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    RBRACE          reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)
    ELSE            reduce using rule 50 (statement -> RETURN maybe_expression SEMI .)


state 167

    (45) statement -> LBRACE new_scope statements . RBRACE

    RBRACE          shift and go to state 202


state 168

    (49) statement -> BREAK maybe_id SEMI .

    SEMI            reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    LBRACE          reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    IF              reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    CONTINUE        reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    BREAK           reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    RETURN          reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    FOR             reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    ID              reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    LPAREN          reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    TRUE            reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    FALSE           reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    NULL            reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    ADDRESS         reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    TIMES           reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    PLUS            reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    MINUS           reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    NOT             reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    INCREMENT       reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    DECREMENT       reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    NEW             reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    DELETE          reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    INTEGER         reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    CHAR            reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    DOUBLE          reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    STRING          reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    RBRACE          reduce using rule 49 (statement -> BREAK maybe_id SEMI .)
    ELSE            reduce using rule 49 (statement -> BREAK maybe_id SEMI .)


state 169

    (48) statement -> CONTINUE maybe_id SEMI .

    SEMI            reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    LBRACE          reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    IF              reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    CONTINUE        reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    BREAK           reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    RETURN          reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    FOR             reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    ID              reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    LPAREN          reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    TRUE            reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    FALSE           reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    NULL            reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    ADDRESS         reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    TIMES           reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    PLUS            reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    MINUS           reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    NOT             reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    INCREMENT       reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    DECREMENT       reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    NEW             reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    DELETE          reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    INTEGER         reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    CHAR            reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    DOUBLE          reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    STRING          reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    RBRACE          reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)
    ELSE            reduce using rule 48 (statement -> CONTINUE maybe_id SEMI .)


state 170

    (117) whole_assignment -> expression DIVEQUAL expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COMMA           reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .)
    RBRACKET        reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .)
    SEMI            reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .)
    RPAREN          reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .)
    COLON           reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126

  ! LBRACKET        [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! TIMES           [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! PLUS            [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! MINUS           [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! GT              [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! LT              [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! LE              [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! GE              [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! EQ              [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! NE              [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! OR              [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! AND             [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! MODULO          [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! EQUALS          [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! TIMESEQUAL      [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! DIVEQUAL        [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! MODEQUAL        [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! PLUSEQUAL       [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! MINUSEQUAL      [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! TERNARY         [ reduce using rule 117 (whole_assignment -> expression DIVEQUAL expression .) ]
  ! COMMA           [ shift and go to state 135 ]


state 171

    (83) ufo -> expression LBRACKET expression . RBRACKET
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        shift and go to state 203
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 172

    (122) ternary_operation -> expression TERNARY expression . COLON expression
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COLON           shift and go to state 204
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 173

    (100) binary_operation -> expression MINUS expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 100 (binary_operation -> expression MINUS expression .)
    PLUS            reduce using rule 100 (binary_operation -> expression MINUS expression .)
    MINUS           reduce using rule 100 (binary_operation -> expression MINUS expression .)
    GT              reduce using rule 100 (binary_operation -> expression MINUS expression .)
    LT              reduce using rule 100 (binary_operation -> expression MINUS expression .)
    LE              reduce using rule 100 (binary_operation -> expression MINUS expression .)
    GE              reduce using rule 100 (binary_operation -> expression MINUS expression .)
    EQ              reduce using rule 100 (binary_operation -> expression MINUS expression .)
    NE              reduce using rule 100 (binary_operation -> expression MINUS expression .)
    OR              reduce using rule 100 (binary_operation -> expression MINUS expression .)
    AND             reduce using rule 100 (binary_operation -> expression MINUS expression .)
    COMMA           reduce using rule 100 (binary_operation -> expression MINUS expression .)
    EQUALS          reduce using rule 100 (binary_operation -> expression MINUS expression .)
    TIMESEQUAL      reduce using rule 100 (binary_operation -> expression MINUS expression .)
    DIVEQUAL        reduce using rule 100 (binary_operation -> expression MINUS expression .)
    MODEQUAL        reduce using rule 100 (binary_operation -> expression MINUS expression .)
    PLUSEQUAL       reduce using rule 100 (binary_operation -> expression MINUS expression .)
    MINUSEQUAL      reduce using rule 100 (binary_operation -> expression MINUS expression .)
    TERNARY         reduce using rule 100 (binary_operation -> expression MINUS expression .)
    SEMI            reduce using rule 100 (binary_operation -> expression MINUS expression .)
    RPAREN          reduce using rule 100 (binary_operation -> expression MINUS expression .)
    COLON           reduce using rule 100 (binary_operation -> expression MINUS expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 100 (binary_operation -> expression MINUS expression .) ]
  ! TIMES           [ reduce using rule 100 (binary_operation -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 100 (binary_operation -> expression MINUS expression .) ]
  ! MODULO          [ reduce using rule 100 (binary_operation -> expression MINUS expression .) ]
  ! INCREMENT       [ reduce using rule 100 (binary_operation -> expression MINUS expression .) ]
  ! DECREMENT       [ reduce using rule 100 (binary_operation -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 174

    (103) binary_operation -> expression LE expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 103 (binary_operation -> expression LE expression .)
    GT              reduce using rule 103 (binary_operation -> expression LE expression .)
    LT              reduce using rule 103 (binary_operation -> expression LE expression .)
    LE              reduce using rule 103 (binary_operation -> expression LE expression .)
    GE              reduce using rule 103 (binary_operation -> expression LE expression .)
    EQ              reduce using rule 103 (binary_operation -> expression LE expression .)
    NE              reduce using rule 103 (binary_operation -> expression LE expression .)
    OR              reduce using rule 103 (binary_operation -> expression LE expression .)
    AND             reduce using rule 103 (binary_operation -> expression LE expression .)
    COMMA           reduce using rule 103 (binary_operation -> expression LE expression .)
    EQUALS          reduce using rule 103 (binary_operation -> expression LE expression .)
    TIMESEQUAL      reduce using rule 103 (binary_operation -> expression LE expression .)
    DIVEQUAL        reduce using rule 103 (binary_operation -> expression LE expression .)
    MODEQUAL        reduce using rule 103 (binary_operation -> expression LE expression .)
    PLUSEQUAL       reduce using rule 103 (binary_operation -> expression LE expression .)
    MINUSEQUAL      reduce using rule 103 (binary_operation -> expression LE expression .)
    TERNARY         reduce using rule 103 (binary_operation -> expression LE expression .)
    SEMI            reduce using rule 103 (binary_operation -> expression LE expression .)
    RPAREN          reduce using rule 103 (binary_operation -> expression LE expression .)
    COLON           reduce using rule 103 (binary_operation -> expression LE expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! TIMES           [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! DIVIDE          [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! PLUS            [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! MINUS           [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! MODULO          [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! INCREMENT       [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! DECREMENT       [ reduce using rule 103 (binary_operation -> expression LE expression .) ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 175

    (118) whole_assignment -> expression MODEQUAL expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COMMA           reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .)
    RBRACKET        reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .)
    SEMI            reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .)
    RPAREN          reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .)
    COLON           reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126

  ! LBRACKET        [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! TIMES           [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! PLUS            [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! MINUS           [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! GT              [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! LT              [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! LE              [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! GE              [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! EQ              [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! NE              [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! OR              [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! AND             [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! MODULO          [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! EQUALS          [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! TIMESEQUAL      [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! DIVEQUAL        [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! MODEQUAL        [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! PLUSEQUAL       [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! MINUSEQUAL      [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! TERNARY         [ reduce using rule 118 (whole_assignment -> expression MODEQUAL expression .) ]
  ! COMMA           [ shift and go to state 135 ]


state 176

    (106) binary_operation -> expression NE expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 106 (binary_operation -> expression NE expression .)
    GT              reduce using rule 106 (binary_operation -> expression NE expression .)
    LT              reduce using rule 106 (binary_operation -> expression NE expression .)
    LE              reduce using rule 106 (binary_operation -> expression NE expression .)
    GE              reduce using rule 106 (binary_operation -> expression NE expression .)
    EQ              reduce using rule 106 (binary_operation -> expression NE expression .)
    NE              reduce using rule 106 (binary_operation -> expression NE expression .)
    OR              reduce using rule 106 (binary_operation -> expression NE expression .)
    AND             reduce using rule 106 (binary_operation -> expression NE expression .)
    COMMA           reduce using rule 106 (binary_operation -> expression NE expression .)
    EQUALS          reduce using rule 106 (binary_operation -> expression NE expression .)
    TIMESEQUAL      reduce using rule 106 (binary_operation -> expression NE expression .)
    DIVEQUAL        reduce using rule 106 (binary_operation -> expression NE expression .)
    MODEQUAL        reduce using rule 106 (binary_operation -> expression NE expression .)
    PLUSEQUAL       reduce using rule 106 (binary_operation -> expression NE expression .)
    MINUSEQUAL      reduce using rule 106 (binary_operation -> expression NE expression .)
    TERNARY         reduce using rule 106 (binary_operation -> expression NE expression .)
    SEMI            reduce using rule 106 (binary_operation -> expression NE expression .)
    RPAREN          reduce using rule 106 (binary_operation -> expression NE expression .)
    COLON           reduce using rule 106 (binary_operation -> expression NE expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! TIMES           [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! DIVIDE          [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! PLUS            [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! MINUS           [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! MODULO          [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! INCREMENT       [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! DECREMENT       [ reduce using rule 106 (binary_operation -> expression NE expression .) ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 177

    (102) binary_operation -> expression LT expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 102 (binary_operation -> expression LT expression .)
    GT              reduce using rule 102 (binary_operation -> expression LT expression .)
    LT              reduce using rule 102 (binary_operation -> expression LT expression .)
    LE              reduce using rule 102 (binary_operation -> expression LT expression .)
    GE              reduce using rule 102 (binary_operation -> expression LT expression .)
    EQ              reduce using rule 102 (binary_operation -> expression LT expression .)
    NE              reduce using rule 102 (binary_operation -> expression LT expression .)
    OR              reduce using rule 102 (binary_operation -> expression LT expression .)
    AND             reduce using rule 102 (binary_operation -> expression LT expression .)
    COMMA           reduce using rule 102 (binary_operation -> expression LT expression .)
    EQUALS          reduce using rule 102 (binary_operation -> expression LT expression .)
    TIMESEQUAL      reduce using rule 102 (binary_operation -> expression LT expression .)
    DIVEQUAL        reduce using rule 102 (binary_operation -> expression LT expression .)
    MODEQUAL        reduce using rule 102 (binary_operation -> expression LT expression .)
    PLUSEQUAL       reduce using rule 102 (binary_operation -> expression LT expression .)
    MINUSEQUAL      reduce using rule 102 (binary_operation -> expression LT expression .)
    TERNARY         reduce using rule 102 (binary_operation -> expression LT expression .)
    SEMI            reduce using rule 102 (binary_operation -> expression LT expression .)
    RPAREN          reduce using rule 102 (binary_operation -> expression LT expression .)
    COLON           reduce using rule 102 (binary_operation -> expression LT expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! PLUS            [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! MODULO          [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! INCREMENT       [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! DECREMENT       [ reduce using rule 102 (binary_operation -> expression LT expression .) ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 178

    (99) binary_operation -> expression PLUS expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 99 (binary_operation -> expression PLUS expression .)
    PLUS            reduce using rule 99 (binary_operation -> expression PLUS expression .)
    MINUS           reduce using rule 99 (binary_operation -> expression PLUS expression .)
    GT              reduce using rule 99 (binary_operation -> expression PLUS expression .)
    LT              reduce using rule 99 (binary_operation -> expression PLUS expression .)
    LE              reduce using rule 99 (binary_operation -> expression PLUS expression .)
    GE              reduce using rule 99 (binary_operation -> expression PLUS expression .)
    EQ              reduce using rule 99 (binary_operation -> expression PLUS expression .)
    NE              reduce using rule 99 (binary_operation -> expression PLUS expression .)
    OR              reduce using rule 99 (binary_operation -> expression PLUS expression .)
    AND             reduce using rule 99 (binary_operation -> expression PLUS expression .)
    COMMA           reduce using rule 99 (binary_operation -> expression PLUS expression .)
    EQUALS          reduce using rule 99 (binary_operation -> expression PLUS expression .)
    TIMESEQUAL      reduce using rule 99 (binary_operation -> expression PLUS expression .)
    DIVEQUAL        reduce using rule 99 (binary_operation -> expression PLUS expression .)
    MODEQUAL        reduce using rule 99 (binary_operation -> expression PLUS expression .)
    PLUSEQUAL       reduce using rule 99 (binary_operation -> expression PLUS expression .)
    MINUSEQUAL      reduce using rule 99 (binary_operation -> expression PLUS expression .)
    TERNARY         reduce using rule 99 (binary_operation -> expression PLUS expression .)
    SEMI            reduce using rule 99 (binary_operation -> expression PLUS expression .)
    RPAREN          reduce using rule 99 (binary_operation -> expression PLUS expression .)
    COLON           reduce using rule 99 (binary_operation -> expression PLUS expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 99 (binary_operation -> expression PLUS expression .) ]
  ! TIMES           [ reduce using rule 99 (binary_operation -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 99 (binary_operation -> expression PLUS expression .) ]
  ! MODULO          [ reduce using rule 99 (binary_operation -> expression PLUS expression .) ]
  ! INCREMENT       [ reduce using rule 99 (binary_operation -> expression PLUS expression .) ]
  ! DECREMENT       [ reduce using rule 99 (binary_operation -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 179

    (109) binary_operation -> expression COMMA expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 109 (binary_operation -> expression COMMA expression .)
    COMMA           reduce using rule 109 (binary_operation -> expression COMMA expression .)
    SEMI            reduce using rule 109 (binary_operation -> expression COMMA expression .)
    RPAREN          reduce using rule 109 (binary_operation -> expression COMMA expression .)
    COLON           reduce using rule 109 (binary_operation -> expression COMMA expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126

  ! LBRACKET        [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! TIMES           [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! DIVIDE          [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! PLUS            [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! MINUS           [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! GT              [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! LT              [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! LE              [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! GE              [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! EQ              [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! NE              [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! OR              [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! AND             [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! MODULO          [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! INCREMENT       [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! DECREMENT       [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! EQUALS          [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! TIMESEQUAL      [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! DIVEQUAL        [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! MODEQUAL        [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! PLUSEQUAL       [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! MINUSEQUAL      [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! TERNARY         [ reduce using rule 109 (binary_operation -> expression COMMA expression .) ]
  ! COMMA           [ shift and go to state 135 ]


state 180

    (101) binary_operation -> expression GT expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 101 (binary_operation -> expression GT expression .)
    GT              reduce using rule 101 (binary_operation -> expression GT expression .)
    LT              reduce using rule 101 (binary_operation -> expression GT expression .)
    LE              reduce using rule 101 (binary_operation -> expression GT expression .)
    GE              reduce using rule 101 (binary_operation -> expression GT expression .)
    EQ              reduce using rule 101 (binary_operation -> expression GT expression .)
    NE              reduce using rule 101 (binary_operation -> expression GT expression .)
    OR              reduce using rule 101 (binary_operation -> expression GT expression .)
    AND             reduce using rule 101 (binary_operation -> expression GT expression .)
    COMMA           reduce using rule 101 (binary_operation -> expression GT expression .)
    EQUALS          reduce using rule 101 (binary_operation -> expression GT expression .)
    TIMESEQUAL      reduce using rule 101 (binary_operation -> expression GT expression .)
    DIVEQUAL        reduce using rule 101 (binary_operation -> expression GT expression .)
    MODEQUAL        reduce using rule 101 (binary_operation -> expression GT expression .)
    PLUSEQUAL       reduce using rule 101 (binary_operation -> expression GT expression .)
    MINUSEQUAL      reduce using rule 101 (binary_operation -> expression GT expression .)
    TERNARY         reduce using rule 101 (binary_operation -> expression GT expression .)
    SEMI            reduce using rule 101 (binary_operation -> expression GT expression .)
    RPAREN          reduce using rule 101 (binary_operation -> expression GT expression .)
    COLON           reduce using rule 101 (binary_operation -> expression GT expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! PLUS            [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! MODULO          [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! INCREMENT       [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! DECREMENT       [ reduce using rule 101 (binary_operation -> expression GT expression .) ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 181

    (110) binary_operation -> expression MODULO expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 110 (binary_operation -> expression MODULO expression .)
    TIMES           reduce using rule 110 (binary_operation -> expression MODULO expression .)
    DIVIDE          reduce using rule 110 (binary_operation -> expression MODULO expression .)
    PLUS            reduce using rule 110 (binary_operation -> expression MODULO expression .)
    MINUS           reduce using rule 110 (binary_operation -> expression MODULO expression .)
    GT              reduce using rule 110 (binary_operation -> expression MODULO expression .)
    LT              reduce using rule 110 (binary_operation -> expression MODULO expression .)
    LE              reduce using rule 110 (binary_operation -> expression MODULO expression .)
    GE              reduce using rule 110 (binary_operation -> expression MODULO expression .)
    EQ              reduce using rule 110 (binary_operation -> expression MODULO expression .)
    NE              reduce using rule 110 (binary_operation -> expression MODULO expression .)
    OR              reduce using rule 110 (binary_operation -> expression MODULO expression .)
    AND             reduce using rule 110 (binary_operation -> expression MODULO expression .)
    COMMA           reduce using rule 110 (binary_operation -> expression MODULO expression .)
    MODULO          reduce using rule 110 (binary_operation -> expression MODULO expression .)
    EQUALS          reduce using rule 110 (binary_operation -> expression MODULO expression .)
    TIMESEQUAL      reduce using rule 110 (binary_operation -> expression MODULO expression .)
    DIVEQUAL        reduce using rule 110 (binary_operation -> expression MODULO expression .)
    MODEQUAL        reduce using rule 110 (binary_operation -> expression MODULO expression .)
    PLUSEQUAL       reduce using rule 110 (binary_operation -> expression MODULO expression .)
    MINUSEQUAL      reduce using rule 110 (binary_operation -> expression MODULO expression .)
    TERNARY         reduce using rule 110 (binary_operation -> expression MODULO expression .)
    SEMI            reduce using rule 110 (binary_operation -> expression MODULO expression .)
    RPAREN          reduce using rule 110 (binary_operation -> expression MODULO expression .)
    COLON           reduce using rule 110 (binary_operation -> expression MODULO expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 110 (binary_operation -> expression MODULO expression .) ]
  ! INCREMENT       [ reduce using rule 110 (binary_operation -> expression MODULO expression .) ]
  ! DECREMENT       [ reduce using rule 110 (binary_operation -> expression MODULO expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 182

    (98) binary_operation -> expression DIVIDE expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    TIMES           reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    PLUS            reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    MINUS           reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    GT              reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    LT              reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    LE              reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    GE              reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    EQ              reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    NE              reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    OR              reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    AND             reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    COMMA           reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    MODULO          reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    EQUALS          reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    TIMESEQUAL      reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    DIVEQUAL        reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    MODEQUAL        reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    PLUSEQUAL       reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    MINUSEQUAL      reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    TERNARY         reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    SEMI            reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    RPAREN          reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    COLON           reduce using rule 98 (binary_operation -> expression DIVIDE expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 98 (binary_operation -> expression DIVIDE expression .) ]
  ! INCREMENT       [ reduce using rule 98 (binary_operation -> expression DIVIDE expression .) ]
  ! DECREMENT       [ reduce using rule 98 (binary_operation -> expression DIVIDE expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 183

    (115) whole_assignment -> expression EQUALS expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COMMA           reduce using rule 115 (whole_assignment -> expression EQUALS expression .)
    RBRACKET        reduce using rule 115 (whole_assignment -> expression EQUALS expression .)
    SEMI            reduce using rule 115 (whole_assignment -> expression EQUALS expression .)
    RPAREN          reduce using rule 115 (whole_assignment -> expression EQUALS expression .)
    COLON           reduce using rule 115 (whole_assignment -> expression EQUALS expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126

  ! LBRACKET        [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! TIMES           [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! DIVIDE          [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! PLUS            [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! MINUS           [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! GT              [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! LT              [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! LE              [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! GE              [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! EQ              [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! NE              [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! OR              [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! AND             [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! MODULO          [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! INCREMENT       [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! DECREMENT       [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! EQUALS          [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! TIMESEQUAL      [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! DIVEQUAL        [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! MODEQUAL        [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! PLUSEQUAL       [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! MINUSEQUAL      [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! TERNARY         [ reduce using rule 115 (whole_assignment -> expression EQUALS expression .) ]
  ! COMMA           [ shift and go to state 135 ]


state 184

    (97) binary_operation -> expression TIMES expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 97 (binary_operation -> expression TIMES expression .)
    TIMES           reduce using rule 97 (binary_operation -> expression TIMES expression .)
    DIVIDE          reduce using rule 97 (binary_operation -> expression TIMES expression .)
    PLUS            reduce using rule 97 (binary_operation -> expression TIMES expression .)
    MINUS           reduce using rule 97 (binary_operation -> expression TIMES expression .)
    GT              reduce using rule 97 (binary_operation -> expression TIMES expression .)
    LT              reduce using rule 97 (binary_operation -> expression TIMES expression .)
    LE              reduce using rule 97 (binary_operation -> expression TIMES expression .)
    GE              reduce using rule 97 (binary_operation -> expression TIMES expression .)
    EQ              reduce using rule 97 (binary_operation -> expression TIMES expression .)
    NE              reduce using rule 97 (binary_operation -> expression TIMES expression .)
    OR              reduce using rule 97 (binary_operation -> expression TIMES expression .)
    AND             reduce using rule 97 (binary_operation -> expression TIMES expression .)
    COMMA           reduce using rule 97 (binary_operation -> expression TIMES expression .)
    MODULO          reduce using rule 97 (binary_operation -> expression TIMES expression .)
    EQUALS          reduce using rule 97 (binary_operation -> expression TIMES expression .)
    TIMESEQUAL      reduce using rule 97 (binary_operation -> expression TIMES expression .)
    DIVEQUAL        reduce using rule 97 (binary_operation -> expression TIMES expression .)
    MODEQUAL        reduce using rule 97 (binary_operation -> expression TIMES expression .)
    PLUSEQUAL       reduce using rule 97 (binary_operation -> expression TIMES expression .)
    MINUSEQUAL      reduce using rule 97 (binary_operation -> expression TIMES expression .)
    TERNARY         reduce using rule 97 (binary_operation -> expression TIMES expression .)
    SEMI            reduce using rule 97 (binary_operation -> expression TIMES expression .)
    RPAREN          reduce using rule 97 (binary_operation -> expression TIMES expression .)
    COLON           reduce using rule 97 (binary_operation -> expression TIMES expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 97 (binary_operation -> expression TIMES expression .) ]
  ! INCREMENT       [ reduce using rule 97 (binary_operation -> expression TIMES expression .) ]
  ! DECREMENT       [ reduce using rule 97 (binary_operation -> expression TIMES expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 185

    (119) whole_assignment -> expression PLUSEQUAL expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COMMA           reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .)
    RBRACKET        reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .)
    SEMI            reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .)
    RPAREN          reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .)
    COLON           reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126

  ! LBRACKET        [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! TIMES           [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! PLUS            [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! MINUS           [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! GT              [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! LT              [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! LE              [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! GE              [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! EQ              [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! NE              [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! OR              [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! AND             [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! MODULO          [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! EQUALS          [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! TIMESEQUAL      [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! DIVEQUAL        [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! MODEQUAL        [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! PLUSEQUAL       [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! MINUSEQUAL      [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! TERNARY         [ reduce using rule 119 (whole_assignment -> expression PLUSEQUAL expression .) ]
  ! COMMA           [ shift and go to state 135 ]


state 186

    (104) binary_operation -> expression GE expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 104 (binary_operation -> expression GE expression .)
    GT              reduce using rule 104 (binary_operation -> expression GE expression .)
    LT              reduce using rule 104 (binary_operation -> expression GE expression .)
    LE              reduce using rule 104 (binary_operation -> expression GE expression .)
    GE              reduce using rule 104 (binary_operation -> expression GE expression .)
    EQ              reduce using rule 104 (binary_operation -> expression GE expression .)
    NE              reduce using rule 104 (binary_operation -> expression GE expression .)
    OR              reduce using rule 104 (binary_operation -> expression GE expression .)
    AND             reduce using rule 104 (binary_operation -> expression GE expression .)
    COMMA           reduce using rule 104 (binary_operation -> expression GE expression .)
    EQUALS          reduce using rule 104 (binary_operation -> expression GE expression .)
    TIMESEQUAL      reduce using rule 104 (binary_operation -> expression GE expression .)
    DIVEQUAL        reduce using rule 104 (binary_operation -> expression GE expression .)
    MODEQUAL        reduce using rule 104 (binary_operation -> expression GE expression .)
    PLUSEQUAL       reduce using rule 104 (binary_operation -> expression GE expression .)
    MINUSEQUAL      reduce using rule 104 (binary_operation -> expression GE expression .)
    TERNARY         reduce using rule 104 (binary_operation -> expression GE expression .)
    SEMI            reduce using rule 104 (binary_operation -> expression GE expression .)
    RPAREN          reduce using rule 104 (binary_operation -> expression GE expression .)
    COLON           reduce using rule 104 (binary_operation -> expression GE expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! TIMES           [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! DIVIDE          [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! PLUS            [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! MINUS           [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! MODULO          [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! INCREMENT       [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! DECREMENT       [ reduce using rule 104 (binary_operation -> expression GE expression .) ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 187

    (105) binary_operation -> expression EQ expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 105 (binary_operation -> expression EQ expression .)
    GT              reduce using rule 105 (binary_operation -> expression EQ expression .)
    LT              reduce using rule 105 (binary_operation -> expression EQ expression .)
    LE              reduce using rule 105 (binary_operation -> expression EQ expression .)
    GE              reduce using rule 105 (binary_operation -> expression EQ expression .)
    EQ              reduce using rule 105 (binary_operation -> expression EQ expression .)
    NE              reduce using rule 105 (binary_operation -> expression EQ expression .)
    OR              reduce using rule 105 (binary_operation -> expression EQ expression .)
    AND             reduce using rule 105 (binary_operation -> expression EQ expression .)
    COMMA           reduce using rule 105 (binary_operation -> expression EQ expression .)
    EQUALS          reduce using rule 105 (binary_operation -> expression EQ expression .)
    TIMESEQUAL      reduce using rule 105 (binary_operation -> expression EQ expression .)
    DIVEQUAL        reduce using rule 105 (binary_operation -> expression EQ expression .)
    MODEQUAL        reduce using rule 105 (binary_operation -> expression EQ expression .)
    PLUSEQUAL       reduce using rule 105 (binary_operation -> expression EQ expression .)
    MINUSEQUAL      reduce using rule 105 (binary_operation -> expression EQ expression .)
    TERNARY         reduce using rule 105 (binary_operation -> expression EQ expression .)
    SEMI            reduce using rule 105 (binary_operation -> expression EQ expression .)
    RPAREN          reduce using rule 105 (binary_operation -> expression EQ expression .)
    COLON           reduce using rule 105 (binary_operation -> expression EQ expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! PLUS            [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! MODULO          [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! INCREMENT       [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! DECREMENT       [ reduce using rule 105 (binary_operation -> expression EQ expression .) ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 188

    (108) binary_operation -> expression AND expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 108 (binary_operation -> expression AND expression .)
    OR              reduce using rule 108 (binary_operation -> expression AND expression .)
    AND             reduce using rule 108 (binary_operation -> expression AND expression .)
    COMMA           reduce using rule 108 (binary_operation -> expression AND expression .)
    EQUALS          reduce using rule 108 (binary_operation -> expression AND expression .)
    TIMESEQUAL      reduce using rule 108 (binary_operation -> expression AND expression .)
    DIVEQUAL        reduce using rule 108 (binary_operation -> expression AND expression .)
    MODEQUAL        reduce using rule 108 (binary_operation -> expression AND expression .)
    PLUSEQUAL       reduce using rule 108 (binary_operation -> expression AND expression .)
    MINUSEQUAL      reduce using rule 108 (binary_operation -> expression AND expression .)
    TERNARY         reduce using rule 108 (binary_operation -> expression AND expression .)
    SEMI            reduce using rule 108 (binary_operation -> expression AND expression .)
    RPAREN          reduce using rule 108 (binary_operation -> expression AND expression .)
    COLON           reduce using rule 108 (binary_operation -> expression AND expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! TIMES           [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! DIVIDE          [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! PLUS            [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! MINUS           [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! GT              [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! LT              [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! LE              [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! GE              [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! EQ              [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! NE              [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! MODULO          [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! INCREMENT       [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! DECREMENT       [ reduce using rule 108 (binary_operation -> expression AND expression .) ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 189

    (120) whole_assignment -> expression MINUSEQUAL expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COMMA           reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .)
    RBRACKET        reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .)
    SEMI            reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .)
    RPAREN          reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .)
    COLON           reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126

  ! LBRACKET        [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! TIMES           [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! PLUS            [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! MINUS           [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! GT              [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! LT              [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! LE              [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! GE              [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! EQ              [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! NE              [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! OR              [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! AND             [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! MODULO          [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! EQUALS          [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! TIMESEQUAL      [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! DIVEQUAL        [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! MODEQUAL        [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! PLUSEQUAL       [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! MINUSEQUAL      [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! TERNARY         [ reduce using rule 120 (whole_assignment -> expression MINUSEQUAL expression .) ]
  ! COMMA           [ shift and go to state 135 ]


state 190

    (116) whole_assignment -> expression TIMESEQUAL expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COMMA           reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .)
    RBRACKET        reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .)
    SEMI            reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .)
    RPAREN          reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .)
    COLON           reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126

  ! LBRACKET        [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! TIMES           [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! DIVIDE          [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! PLUS            [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! MINUS           [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! GT              [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! LT              [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! LE              [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! GE              [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! EQ              [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! NE              [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! OR              [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! AND             [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! MODULO          [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! INCREMENT       [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! DECREMENT       [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! EQUALS          [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! TIMESEQUAL      [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! DIVEQUAL        [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! MODEQUAL        [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! PLUSEQUAL       [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! MINUSEQUAL      [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! TERNARY         [ reduce using rule 116 (whole_assignment -> expression TIMESEQUAL expression .) ]
  ! COMMA           [ shift and go to state 135 ]


state 191

    (107) binary_operation -> expression OR expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 107 (binary_operation -> expression OR expression .)
    OR              reduce using rule 107 (binary_operation -> expression OR expression .)
    COMMA           reduce using rule 107 (binary_operation -> expression OR expression .)
    EQUALS          reduce using rule 107 (binary_operation -> expression OR expression .)
    TIMESEQUAL      reduce using rule 107 (binary_operation -> expression OR expression .)
    DIVEQUAL        reduce using rule 107 (binary_operation -> expression OR expression .)
    MODEQUAL        reduce using rule 107 (binary_operation -> expression OR expression .)
    PLUSEQUAL       reduce using rule 107 (binary_operation -> expression OR expression .)
    MINUSEQUAL      reduce using rule 107 (binary_operation -> expression OR expression .)
    TERNARY         reduce using rule 107 (binary_operation -> expression OR expression .)
    SEMI            reduce using rule 107 (binary_operation -> expression OR expression .)
    RPAREN          reduce using rule 107 (binary_operation -> expression OR expression .)
    COLON           reduce using rule 107 (binary_operation -> expression OR expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! TIMES           [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! DIVIDE          [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! PLUS            [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! MINUS           [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! GT              [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! LT              [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! LE              [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! GE              [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! EQ              [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! NE              [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! AND             [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! MODULO          [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! INCREMENT       [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! DECREMENT       [ reduce using rule 107 (binary_operation -> expression OR expression .) ]
  ! OR              [ shift and go to state 148 ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 192

    (28) declarator -> decl_identifier LBRACKET constant_expression RBRACKET .

    COMMA           reduce using rule 28 (declarator -> decl_identifier LBRACKET constant_expression RBRACKET .)
    SEMI            reduce using rule 28 (declarator -> decl_identifier LBRACKET constant_expression RBRACKET .)


state 193

    (39) function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .

    VOID            reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    INTTYPE         reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    CHARTYPE        reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    BOOLTYPE        reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    DOUBLETYPE      reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    SEMI            reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    LBRACE          reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    IF              reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    CONTINUE        reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    BREAK           reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    RETURN          reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    FOR             reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    ID              reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    LPAREN          reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    TRUE            reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    FALSE           reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    NULL            reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    ADDRESS         reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    TIMES           reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    PLUS            reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    MINUS           reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    NOT             reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    INCREMENT       reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    DECREMENT       reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    NEW             reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    DELETE          reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    INTEGER         reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    CHAR            reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    DOUBLE          reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    STRING          reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)
    RBRACE          reduce using rule 39 (function_with_result_and_parameters -> function_with_result_type LPAREN maybe_parameter_list RPAREN LBRACE .)


state 194

    (29) function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .

    VOID            reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    INTTYPE         reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    CHARTYPE        reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    BOOLTYPE        reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    DOUBLETYPE      reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    SEMI            reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    LBRACE          reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    IF              reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    CONTINUE        reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    BREAK           reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    RETURN          reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    FOR             reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    ID              reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    LPAREN          reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    TRUE            reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    FALSE           reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    NULL            reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    ADDRESS         reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    TIMES           reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    PLUS            reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    MINUS           reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    NOT             reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    INCREMENT       reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    DECREMENT       reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    NEW             reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    DELETE          reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    INTEGER         reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    CHAR            reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    DOUBLE          reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    STRING          reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    RBRACE          reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    INCLUDE         reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)
    $end            reduce using rule 29 (function_declaration -> function_with_result_type LPAREN maybe_parameter_list RPAREN SEMI .)


state 195

    (37) parameter -> BYREF type decl_identifier .

    COMMA           reduce using rule 37 (parameter -> BYREF type decl_identifier .)
    RPAREN          reduce using rule 37 (parameter -> BYREF type decl_identifier .)


state 196

    (35) parameter_list -> parameter COMMA parameter_list .

    RPAREN          reduce using rule 35 (parameter_list -> parameter COMMA parameter_list .)


state 197

    (74) new -> NEW type LBRACKET expression . RBRACKET
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        shift and go to state 205
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    COMMA           shift and go to state 135
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146
    EQUALS          shift and go to state 139
    TIMESEQUAL      shift and go to state 147
    DIVEQUAL        shift and go to state 124
    MODEQUAL        shift and go to state 130
    PLUSEQUAL       shift and go to state 141
    MINUSEQUAL      shift and go to state 145
    TERNARY         shift and go to state 126


state 198

    (84) function_call -> ID LPAREN empty RPAREN .

    RPAREN          reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    COMMA           reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    LBRACKET        reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    TIMES           reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    DIVIDE          reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    PLUS            reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    MINUS           reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    GT              reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    LT              reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    LE              reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    GE              reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    EQ              reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    NE              reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    OR              reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    AND             reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    MODULO          reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    INCREMENT       reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    DECREMENT       reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    EQUALS          reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    TIMESEQUAL      reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    DIVEQUAL        reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    MODEQUAL        reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    PLUSEQUAL       reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    MINUSEQUAL      reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    TERNARY         reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    SEMI            reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    RBRACKET        reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)
    COLON           reduce using rule 84 (function_call -> ID LPAREN empty RPAREN .)


state 199

    (47) statement -> for_loop LPAREN maybe_expression SEMI . maybe_expression SEMI maybe_expression RPAREN statement
    (55) maybe_expression -> . empty
    (56) maybe_expression -> . expression
    (136) empty -> .
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    SEMI            reduce using rule 136 (empty -> .)
    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    empty                          shift and go to state 113
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    maybe_expression               shift and go to state 206
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 114
    delete                         shift and go to state 84

state 200

    (121) type_casting -> LPAREN type RPAREN expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    RBRACKET        reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    TIMES           reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    DIVIDE          reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    PLUS            reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    MINUS           reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    GT              reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    LT              reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    LE              reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    GE              reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    EQ              reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    NE              reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    OR              reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    AND             reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    COMMA           reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    MODULO          reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    EQUALS          reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    TIMESEQUAL      reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    DIVEQUAL        reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    MODEQUAL        reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    PLUSEQUAL       reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    MINUSEQUAL      reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    TERNARY         reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    RPAREN          reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    SEMI            reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    COLON           reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .)
    LBRACKET        shift and go to state 125
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .) ]
  ! INCREMENT       [ reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .) ]
  ! DECREMENT       [ reduce using rule 121 (type_casting -> LPAREN type RPAREN expression .) ]
  ! TIMES           [ shift and go to state 140 ]
  ! DIVIDE          [ shift and go to state 138 ]
  ! PLUS            [ shift and go to state 133 ]
  ! MINUS           [ shift and go to state 127 ]
  ! GT              [ shift and go to state 136 ]
  ! LT              [ shift and go to state 132 ]
  ! LE              [ shift and go to state 128 ]
  ! GE              [ shift and go to state 142 ]
  ! EQ              [ shift and go to state 143 ]
  ! NE              [ shift and go to state 131 ]
  ! OR              [ shift and go to state 148 ]
  ! AND             [ shift and go to state 144 ]
  ! COMMA           [ shift and go to state 135 ]
  ! MODULO          [ shift and go to state 137 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 201

    (46) statement -> IF LPAREN expression RPAREN . statement maybe_else
    (43) statement -> . SEMI
    (44) statement -> . expression SEMI
    (45) statement -> . LBRACE new_scope statements RBRACE
    (46) statement -> . IF LPAREN expression RPAREN statement maybe_else
    (47) statement -> . for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
    (48) statement -> . CONTINUE maybe_id SEMI
    (49) statement -> . BREAK maybe_id SEMI
    (50) statement -> . RETURN maybe_expression SEMI
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (51) for_loop -> . FOR
    (52) for_loop -> . ID COLON FOR
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    SEMI            shift and go to state 50
    LBRACE          shift and go to state 73
    IF              shift and go to state 70
    CONTINUE        shift and go to state 78
    BREAK           shift and go to state 77
    RETURN          shift and go to state 72
    FOR             shift and go to state 62
    ID              shift and go to state 51
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    statement                      shift and go to state 207
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    for_loop                       shift and go to state 61
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    constant_value                 shift and go to state 81
    identifier                     shift and go to state 82
    expression                     shift and go to state 83
    delete                         shift and go to state 84

state 202

    (45) statement -> LBRACE new_scope statements RBRACE .

    SEMI            reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    LBRACE          reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    IF              reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    CONTINUE        reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    BREAK           reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    RETURN          reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    FOR             reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    ID              reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    LPAREN          reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    TRUE            reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    FALSE           reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    NULL            reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    ADDRESS         reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    TIMES           reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    PLUS            reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    MINUS           reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    NOT             reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    INCREMENT       reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    DECREMENT       reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    NEW             reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    DELETE          reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    INTEGER         reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    CHAR            reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    DOUBLE          reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    STRING          reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    RBRACE          reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)
    ELSE            reduce using rule 45 (statement -> LBRACE new_scope statements RBRACE .)


state 203

    (83) ufo -> expression LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    GT              reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    GE              reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    NE              reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    TERNARY         reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)
    COLON           reduce using rule 83 (ufo -> expression LBRACKET expression RBRACKET .)


state 204

    (122) ternary_operation -> expression TERNARY expression COLON . expression
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    whole_assignment               shift and go to state 44
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    constant_value_string          shift and go to state 39
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 208
    delete                         shift and go to state 84

state 205

    (74) new -> NEW type LBRACKET expression RBRACKET .

    LBRACKET        reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    GT              reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    LT              reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    LE              reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    GE              reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    EQ              reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    NE              reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    OR              reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    AND             reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    MODULO          reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    INCREMENT       reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    DECREMENT       reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    TIMESEQUAL      reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    DIVEQUAL        reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    MODEQUAL        reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    PLUSEQUAL       reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    MINUSEQUAL      reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    TERNARY         reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)
    COLON           reduce using rule 74 (new -> NEW type LBRACKET expression RBRACKET .)


state 206

    (47) statement -> for_loop LPAREN maybe_expression SEMI maybe_expression . SEMI maybe_expression RPAREN statement

    SEMI            shift and go to state 209


state 207

    (46) statement -> IF LPAREN expression RPAREN statement . maybe_else
    (57) maybe_else -> . empty
    (58) maybe_else -> . ELSE statement
    (136) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 211
    SEMI            reduce using rule 136 (empty -> .)
    LBRACE          reduce using rule 136 (empty -> .)
    IF              reduce using rule 136 (empty -> .)
    CONTINUE        reduce using rule 136 (empty -> .)
    BREAK           reduce using rule 136 (empty -> .)
    RETURN          reduce using rule 136 (empty -> .)
    FOR             reduce using rule 136 (empty -> .)
    ID              reduce using rule 136 (empty -> .)
    LPAREN          reduce using rule 136 (empty -> .)
    TRUE            reduce using rule 136 (empty -> .)
    FALSE           reduce using rule 136 (empty -> .)
    NULL            reduce using rule 136 (empty -> .)
    ADDRESS         reduce using rule 136 (empty -> .)
    TIMES           reduce using rule 136 (empty -> .)
    PLUS            reduce using rule 136 (empty -> .)
    MINUS           reduce using rule 136 (empty -> .)
    NOT             reduce using rule 136 (empty -> .)
    INCREMENT       reduce using rule 136 (empty -> .)
    DECREMENT       reduce using rule 136 (empty -> .)
    NEW             reduce using rule 136 (empty -> .)
    DELETE          reduce using rule 136 (empty -> .)
    INTEGER         reduce using rule 136 (empty -> .)
    CHAR            reduce using rule 136 (empty -> .)
    DOUBLE          reduce using rule 136 (empty -> .)
    STRING          reduce using rule 136 (empty -> .)
    RBRACE          reduce using rule 136 (empty -> .)

  ! ELSE            [ reduce using rule 136 (empty -> .) ]

    empty                          shift and go to state 212
    maybe_else                     shift and go to state 210

state 208

    (122) ternary_operation -> expression TERNARY expression COLON expression .
    (83) ufo -> expression . LBRACKET expression RBRACKET
    (97) binary_operation -> expression . TIMES expression
    (98) binary_operation -> expression . DIVIDE expression
    (99) binary_operation -> expression . PLUS expression
    (100) binary_operation -> expression . MINUS expression
    (101) binary_operation -> expression . GT expression
    (102) binary_operation -> expression . LT expression
    (103) binary_operation -> expression . LE expression
    (104) binary_operation -> expression . GE expression
    (105) binary_operation -> expression . EQ expression
    (106) binary_operation -> expression . NE expression
    (107) binary_operation -> expression . OR expression
    (108) binary_operation -> expression . AND expression
    (109) binary_operation -> expression . COMMA expression
    (110) binary_operation -> expression . MODULO expression
    (113) right_assignment -> expression . INCREMENT
    (114) right_assignment -> expression . DECREMENT
    (115) whole_assignment -> expression . EQUALS expression
    (116) whole_assignment -> expression . TIMESEQUAL expression
    (117) whole_assignment -> expression . DIVEQUAL expression
    (118) whole_assignment -> expression . MODEQUAL expression
    (119) whole_assignment -> expression . PLUSEQUAL expression
    (120) whole_assignment -> expression . MINUSEQUAL expression
    (122) ternary_operation -> expression . TERNARY expression COLON expression

    COMMA           reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    EQUALS          reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    TIMESEQUAL      reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    DIVEQUAL        reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    MODEQUAL        reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    PLUSEQUAL       reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    MINUSEQUAL      reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    TERNARY         reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    SEMI            reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    RPAREN          reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    RBRACKET        reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    COLON           reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .)
    LBRACKET        shift and go to state 125
    TIMES           shift and go to state 140
    DIVIDE          shift and go to state 138
    PLUS            shift and go to state 133
    MINUS           shift and go to state 127
    GT              shift and go to state 136
    LT              shift and go to state 132
    LE              shift and go to state 128
    GE              shift and go to state 142
    EQ              shift and go to state 143
    NE              shift and go to state 131
    OR              shift and go to state 148
    AND             shift and go to state 144
    MODULO          shift and go to state 137
    INCREMENT       shift and go to state 134
    DECREMENT       shift and go to state 146

  ! LBRACKET        [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! TIMES           [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! DIVIDE          [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! PLUS            [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! MINUS           [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! GT              [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! LT              [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! LE              [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! GE              [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! EQ              [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! NE              [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! OR              [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! AND             [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! MODULO          [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! INCREMENT       [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! DECREMENT       [ reduce using rule 122 (ternary_operation -> expression TERNARY expression COLON expression .) ]
  ! COMMA           [ shift and go to state 135 ]
  ! EQUALS          [ shift and go to state 139 ]
  ! TIMESEQUAL      [ shift and go to state 147 ]
  ! DIVEQUAL        [ shift and go to state 124 ]
  ! MODEQUAL        [ shift and go to state 130 ]
  ! PLUSEQUAL       [ shift and go to state 141 ]
  ! MINUSEQUAL      [ shift and go to state 145 ]
  ! TERNARY         [ shift and go to state 126 ]


state 209

    (47) statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI . maybe_expression RPAREN statement
    (55) maybe_expression -> . empty
    (56) maybe_expression -> . expression
    (136) empty -> .
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    RPAREN          reduce using rule 136 (empty -> .)
    ID              shift and go to state 96
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value                 shift and go to state 81
    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    empty                          shift and go to state 113
    function_with_acts             shift and go to state 59
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    maybe_expression               shift and go to state 213
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    identifier                     shift and go to state 82
    expression                     shift and go to state 114
    delete                         shift and go to state 84

state 210

    (46) statement -> IF LPAREN expression RPAREN statement maybe_else .

    SEMI            reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    LBRACE          reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    IF              reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    CONTINUE        reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    BREAK           reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    RETURN          reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    FOR             reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    ID              reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    LPAREN          reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    TRUE            reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    FALSE           reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    NULL            reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    ADDRESS         reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    TIMES           reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    PLUS            reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    MINUS           reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    NOT             reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    INCREMENT       reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    DECREMENT       reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    NEW             reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    DELETE          reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    INTEGER         reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    CHAR            reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    DOUBLE          reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    STRING          reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    RBRACE          reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)
    ELSE            reduce using rule 46 (statement -> IF LPAREN expression RPAREN statement maybe_else .)


state 211

    (58) maybe_else -> ELSE . statement
    (43) statement -> . SEMI
    (44) statement -> . expression SEMI
    (45) statement -> . LBRACE new_scope statements RBRACE
    (46) statement -> . IF LPAREN expression RPAREN statement maybe_else
    (47) statement -> . for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
    (48) statement -> . CONTINUE maybe_id SEMI
    (49) statement -> . BREAK maybe_id SEMI
    (50) statement -> . RETURN maybe_expression SEMI
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (51) for_loop -> . FOR
    (52) for_loop -> . ID COLON FOR
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    SEMI            shift and go to state 50
    LBRACE          shift and go to state 73
    IF              shift and go to state 70
    CONTINUE        shift and go to state 78
    BREAK           shift and go to state 77
    RETURN          shift and go to state 72
    FOR             shift and go to state 62
    ID              shift and go to state 51
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    statement                      shift and go to state 214
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    for_loop                       shift and go to state 61
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    constant_value                 shift and go to state 81
    identifier                     shift and go to state 82
    expression                     shift and go to state 83
    delete                         shift and go to state 84

state 212

    (57) maybe_else -> empty .

    ELSE            reduce using rule 57 (maybe_else -> empty .)
    SEMI            reduce using rule 57 (maybe_else -> empty .)
    LBRACE          reduce using rule 57 (maybe_else -> empty .)
    IF              reduce using rule 57 (maybe_else -> empty .)
    CONTINUE        reduce using rule 57 (maybe_else -> empty .)
    BREAK           reduce using rule 57 (maybe_else -> empty .)
    RETURN          reduce using rule 57 (maybe_else -> empty .)
    FOR             reduce using rule 57 (maybe_else -> empty .)
    ID              reduce using rule 57 (maybe_else -> empty .)
    LPAREN          reduce using rule 57 (maybe_else -> empty .)
    TRUE            reduce using rule 57 (maybe_else -> empty .)
    FALSE           reduce using rule 57 (maybe_else -> empty .)
    NULL            reduce using rule 57 (maybe_else -> empty .)
    ADDRESS         reduce using rule 57 (maybe_else -> empty .)
    TIMES           reduce using rule 57 (maybe_else -> empty .)
    PLUS            reduce using rule 57 (maybe_else -> empty .)
    MINUS           reduce using rule 57 (maybe_else -> empty .)
    NOT             reduce using rule 57 (maybe_else -> empty .)
    INCREMENT       reduce using rule 57 (maybe_else -> empty .)
    DECREMENT       reduce using rule 57 (maybe_else -> empty .)
    NEW             reduce using rule 57 (maybe_else -> empty .)
    DELETE          reduce using rule 57 (maybe_else -> empty .)
    INTEGER         reduce using rule 57 (maybe_else -> empty .)
    CHAR            reduce using rule 57 (maybe_else -> empty .)
    DOUBLE          reduce using rule 57 (maybe_else -> empty .)
    STRING          reduce using rule 57 (maybe_else -> empty .)
    RBRACE          reduce using rule 57 (maybe_else -> empty .)


state 213

    (47) statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression . RPAREN statement

    RPAREN          shift and go to state 215


state 214

    (58) maybe_else -> ELSE statement .

    ELSE            reduce using rule 58 (maybe_else -> ELSE statement .)
    SEMI            reduce using rule 58 (maybe_else -> ELSE statement .)
    LBRACE          reduce using rule 58 (maybe_else -> ELSE statement .)
    IF              reduce using rule 58 (maybe_else -> ELSE statement .)
    CONTINUE        reduce using rule 58 (maybe_else -> ELSE statement .)
    BREAK           reduce using rule 58 (maybe_else -> ELSE statement .)
    RETURN          reduce using rule 58 (maybe_else -> ELSE statement .)
    FOR             reduce using rule 58 (maybe_else -> ELSE statement .)
    ID              reduce using rule 58 (maybe_else -> ELSE statement .)
    LPAREN          reduce using rule 58 (maybe_else -> ELSE statement .)
    TRUE            reduce using rule 58 (maybe_else -> ELSE statement .)
    FALSE           reduce using rule 58 (maybe_else -> ELSE statement .)
    NULL            reduce using rule 58 (maybe_else -> ELSE statement .)
    ADDRESS         reduce using rule 58 (maybe_else -> ELSE statement .)
    TIMES           reduce using rule 58 (maybe_else -> ELSE statement .)
    PLUS            reduce using rule 58 (maybe_else -> ELSE statement .)
    MINUS           reduce using rule 58 (maybe_else -> ELSE statement .)
    NOT             reduce using rule 58 (maybe_else -> ELSE statement .)
    INCREMENT       reduce using rule 58 (maybe_else -> ELSE statement .)
    DECREMENT       reduce using rule 58 (maybe_else -> ELSE statement .)
    NEW             reduce using rule 58 (maybe_else -> ELSE statement .)
    DELETE          reduce using rule 58 (maybe_else -> ELSE statement .)
    INTEGER         reduce using rule 58 (maybe_else -> ELSE statement .)
    CHAR            reduce using rule 58 (maybe_else -> ELSE statement .)
    DOUBLE          reduce using rule 58 (maybe_else -> ELSE statement .)
    STRING          reduce using rule 58 (maybe_else -> ELSE statement .)
    RBRACE          reduce using rule 58 (maybe_else -> ELSE statement .)


state 215

    (47) statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN . statement
    (43) statement -> . SEMI
    (44) statement -> . expression SEMI
    (45) statement -> . LBRACE new_scope statements RBRACE
    (46) statement -> . IF LPAREN expression RPAREN statement maybe_else
    (47) statement -> . for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement
    (48) statement -> . CONTINUE maybe_id SEMI
    (49) statement -> . BREAK maybe_id SEMI
    (50) statement -> . RETURN maybe_expression SEMI
    (59) expression -> . identifier
    (60) expression -> . parenthesial_expression
    (61) expression -> . constant_value
    (62) expression -> . function_call
    (63) expression -> . ufo
    (64) expression -> . unary_operation
    (65) expression -> . binary_operation
    (66) expression -> . left_assignment
    (67) expression -> . right_assignment
    (68) expression -> . whole_assignment
    (69) expression -> . type_casting
    (70) expression -> . ternary_operation
    (71) expression -> . new
    (72) expression -> . delete
    (51) for_loop -> . FOR
    (52) for_loop -> . ID COLON FOR
    (25) identifier -> . ID
    (82) parenthesial_expression -> . LPAREN expression RPAREN
    (124) constant_value -> . TRUE
    (125) constant_value -> . FALSE
    (126) constant_value -> . NULL
    (127) constant_value -> . constant_value_int
    (128) constant_value -> . constant_value_char
    (129) constant_value -> . constant_value_double
    (130) constant_value -> . constant_value_string
    (84) function_call -> . ID LPAREN empty RPAREN
    (85) function_call -> . function_with_acts expression RPAREN
    (83) ufo -> . expression LBRACKET expression RBRACKET
    (92) unary_operation -> . ADDRESS expression
    (93) unary_operation -> . TIMES expression
    (94) unary_operation -> . PLUS expression
    (95) unary_operation -> . MINUS expression
    (96) unary_operation -> . NOT expression
    (97) binary_operation -> . expression TIMES expression
    (98) binary_operation -> . expression DIVIDE expression
    (99) binary_operation -> . expression PLUS expression
    (100) binary_operation -> . expression MINUS expression
    (101) binary_operation -> . expression GT expression
    (102) binary_operation -> . expression LT expression
    (103) binary_operation -> . expression LE expression
    (104) binary_operation -> . expression GE expression
    (105) binary_operation -> . expression EQ expression
    (106) binary_operation -> . expression NE expression
    (107) binary_operation -> . expression OR expression
    (108) binary_operation -> . expression AND expression
    (109) binary_operation -> . expression COMMA expression
    (110) binary_operation -> . expression MODULO expression
    (111) left_assignment -> . INCREMENT expression
    (112) left_assignment -> . DECREMENT expression
    (113) right_assignment -> . expression INCREMENT
    (114) right_assignment -> . expression DECREMENT
    (115) whole_assignment -> . expression EQUALS expression
    (116) whole_assignment -> . expression TIMESEQUAL expression
    (117) whole_assignment -> . expression DIVEQUAL expression
    (118) whole_assignment -> . expression MODEQUAL expression
    (119) whole_assignment -> . expression PLUSEQUAL expression
    (120) whole_assignment -> . expression MINUSEQUAL expression
    (121) type_casting -> . LPAREN type RPAREN expression
    (122) ternary_operation -> . expression TERNARY expression COLON expression
    (73) new -> . NEW type
    (74) new -> . NEW type LBRACKET expression RBRACKET
    (123) delete -> . DELETE expression
    (131) constant_value_int -> . INTEGER
    (133) constant_value_char -> . CHAR
    (132) constant_value_double -> . DOUBLE
    (134) constant_value_string -> . STRING
    (86) function_with_acts -> . ID LPAREN
    (87) function_with_acts -> . function_with_acts expression COMMA

    SEMI            shift and go to state 50
    LBRACE          shift and go to state 73
    IF              shift and go to state 70
    CONTINUE        shift and go to state 78
    BREAK           shift and go to state 77
    RETURN          shift and go to state 72
    FOR             shift and go to state 62
    ID              shift and go to state 51
    LPAREN          shift and go to state 68
    TRUE            shift and go to state 46
    FALSE           shift and go to state 74
    NULL            shift and go to state 45
    ADDRESS         shift and go to state 79
    TIMES           shift and go to state 66
    PLUS            shift and go to state 60
    MINUS           shift and go to state 47
    NOT             shift and go to state 80
    INCREMENT       shift and go to state 36
    DECREMENT       shift and go to state 76
    NEW             shift and go to state 49
    DELETE          shift and go to state 40
    INTEGER         shift and go to state 69
    CHAR            shift and go to state 75
    DOUBLE          shift and go to state 48
    STRING          shift and go to state 55

    constant_value_char            shift and go to state 38
    constant_value_string          shift and go to state 39
    function_call                  shift and go to state 41
    constant_value_double          shift and go to state 42
    constant_value_int             shift and go to state 43
    whole_assignment               shift and go to state 44
    parenthesial_expression        shift and go to state 52
    statement                      shift and go to state 216
    new                            shift and go to state 54
    unary_operation                shift and go to state 56
    type_casting                   shift and go to state 57
    function_with_acts             shift and go to state 59
    for_loop                       shift and go to state 61
    ufo                            shift and go to state 63
    right_assignment               shift and go to state 64
    ternary_operation              shift and go to state 67
    binary_operation               shift and go to state 71
    left_assignment                shift and go to state 65
    constant_value                 shift and go to state 81
    identifier                     shift and go to state 82
    expression                     shift and go to state 83
    delete                         shift and go to state 84

state 216

    (47) statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .

    SEMI            reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    LBRACE          reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    IF              reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    CONTINUE        reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    BREAK           reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    RETURN          reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    FOR             reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    ID              reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    LPAREN          reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    TRUE            reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    FALSE           reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    NULL            reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    ADDRESS         reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    TIMES           reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    PLUS            reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    MINUS           reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    NOT             reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    INCREMENT       reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    DECREMENT       reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    NEW             reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    DELETE          reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    INTEGER         reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    CHAR            reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    DOUBLE          reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    STRING          reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    RBRACE          reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)
    ELSE            reduce using rule 47 (statement -> for_loop LPAREN maybe_expression SEMI maybe_expression SEMI maybe_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 207 resolved as shift
